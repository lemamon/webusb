{"version":3,"names":[],"mappings":"","sources":["dap.bundle.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.DAPjs = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_RUNCODE_TIMEOUT = 10000 /* ms */;\nexports.CPUID_IMPLEMENTER_MASK = 0xff000000;\nexports.CPUID_IMPLEMENTER_POS = 24;\nexports.CPUID_VARIANT_MASK = 0x00f00000;\nexports.CPUID_VARIANT_POS = 20;\nexports.CPUID_ARCHITECTURE_MASK = 0x000f0000;\nexports.CPUID_ARCHITECTURE_POS = 16;\nexports.CPUID_PARTNO_MASK = 0x0000fff0;\nexports.CPUID_PARTNO_POS = 4;\nexports.CPUID_REVISION_MASK = 0x0000000f;\nexports.CPUID_REVISION_POS = 0;\nexports.ISANames = new Map();\nexports.ISANames.set(12 /* ARMv6M */, \"ARMv6M\");\nexports.ISANames.set(15 /* ARMv7M */, \"ARMv7M\");\nexports.CoreNames = new Map();\nexports.CoreNames.set(3104 /* CortexM0 */, \"Cortex-M0\");\nexports.CoreNames.set(3105 /* CortexM1 */, \"Cortex-M1\");\nexports.CoreNames.set(3107 /* CortexM3 */, \"Cortex-M3\");\nexports.CoreNames.set(3108 /* CortexM4 */, \"Cortex-M4\");\nexports.CoreNames.set(3168 /* CortexM0p */, \"Cortex-M0+\");\n\n\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = require(\"../debug/debug\");\nconst memory_1 = require(\"../memory/memory\");\nconst prepared_1 = require(\"../memory/prepared\");\nconst util_1 = require(\"../util\");\nconst constants_1 = require(\"./constants\");\nconst prepared_2 = require(\"./prepared\");\n/**\n * # Cortex M\n *\n * Manages access to a CPU core, and its associated memory and debug functionality.\n *\n * > **NOTE:** all of the methods that involve interaction with the CPU core\n * > are asynchronous, so must be `await`ed, or explicitly handled as a Promise.\n *\n * ## Usage\n *\n * First, let's create an instance of `CortexM`, using an associated _Debug Access\n * Port_ (DAP) instance that we created earlier.\n *\n * ```typescript\n * const core = new CortexM(dap);\n * ```\n *\n * Now, we can halt and resume the core just like this:\n *\n * > **NOTE:** If you're not using ES2017, you can replace the use of `async` and\n * > `await` with direct use of Promises. These examples also need to be run within\n * > an `async` function for `async` to be used.\n *\n * ```typescript\n * await core.halt();\n * await core.resume();\n * ```\n *\n * Resetting the core is just as easy:\n *\n * ```typescript\n * await core.reset();\n * ```\n *\n * You can even halt immediately after reset:\n *\n * ```typescript\n * await core.reset(true);\n * ```\n *\n * We can also read and write 32-bit values to/from core registers:\n *\n * ```typescript\n * const sp = await core.readCoreRegister(CortexReg.SP);\n *\n * await core.writeCoreRegister(CortexReg.R0, 0x1000);\n * await core.writeCoreRegister(CortexReg.PC, 0x1234);\n * ```\n *\n * ### See also\n *\n * For details on debugging and memory features, see the documentation for\n * `Debug` and `Memory`.\n */\nclass CortexM {\n    constructor(device) {\n        this.dev = device;\n        this.memory = new memory_1.Memory(device);\n        this.debug = new debug_1.Debug(this);\n    }\n    /**\n     * Initialise the debug access port on the device, and read the device type.\n     */\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.dev.init();\n            // FIXME: don't run this if security is enabled on the K64F\n            yield this.debug.init();\n            yield this.readCoreType();\n        });\n    }\n    /**\n     * Read the current state of the CPU.\n     *\n     * @returns A member of the `CoreState` enum corresponding to the current status of the CPU.\n     */\n    getState() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const dhcsr = yield this.memory.read32(3758157296 /* DHCSR */);\n            if (dhcsr & 33554432 /* S_RESET_ST */) {\n                const newDHCSR = yield this.memory.read32(3758157296 /* DHCSR */);\n                if (newDHCSR & 33554432 /* S_RESET_ST */ && !(newDHCSR & 16777216 /* S_RETIRE_ST */)) {\n                    return 0 /* TARGET_RESET */;\n                }\n            }\n            if (dhcsr & 524288 /* S_LOCKUP */) {\n                return 1 /* TARGET_LOCKUP */;\n            }\n            else if (dhcsr & 262144 /* S_SLEEP */) {\n                return 2 /* TARGET_SLEEPING */;\n            }\n            else if (dhcsr & 131072 /* S_HALT */) {\n                return 3 /* TARGET_HALTED */;\n            }\n            else {\n                return 4 /* TARGET_RUNNING */;\n            }\n        });\n    }\n    /**\n     * Read the CPUID register from the CPU, and interpret its meaning in terms of implementer,\n     * architecture and core type.\n     */\n    readCoreType() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cpuid = yield this.memory.read32(3758157056 /* CPUID */);\n            const implementer = ((cpuid & constants_1.CPUID_IMPLEMENTER_MASK) >> constants_1.CPUID_IMPLEMENTER_POS);\n            const arch = ((cpuid & constants_1.CPUID_ARCHITECTURE_MASK) >> constants_1.CPUID_ARCHITECTURE_POS);\n            const coreType = ((cpuid & constants_1.CPUID_PARTNO_MASK) >> constants_1.CPUID_PARTNO_POS);\n            return [implementer, arch, coreType];\n        });\n    }\n    prepareCommand() {\n        return new prepared_2.PreparedCortexMCommand(this.dev);\n    }\n    /**\n     * Read a core register from the CPU (e.g. r0...r15, pc, sp, lr, s0...)\n     *\n     * @param no Member of the `CortexReg` enum - an ARM Cortex CPU general-purpose register.\n     */\n    readCoreRegister(no) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.memory.write32(3758157300 /* DCRSR */, no);\n            const v = yield this.memory.read32(3758157296 /* DHCSR */);\n            util_1.assert(v & 65536 /* S_REGRDY */);\n            return yield this.memory.read32(3758157304 /* DCRDR */);\n        });\n    }\n    /**\n     * Write a 32-bit word to the specified CPU general-purpose register.\n     *\n     * @param no Member of the `CortexReg` enum - an ARM Cortex CPU general-purpose register.\n     * @param val Value to be written.\n     */\n    writeCoreRegister(no, val) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = new prepared_1.PreparedMemoryCommand(this.dev);\n            prep.write32(3758157304 /* DCRDR */, val);\n            prep.write32(3758157300 /* DCRSR */, no | 65536 /* DCRSR_REGWnR */);\n            prep.read32(3758157296 /* DHCSR */);\n            const v = (yield prep.go())[0];\n            util_1.assert(v & 65536 /* S_REGRDY */);\n        });\n    }\n    /**\n     * Halt the CPU core.\n     */\n    halt() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */);\n        });\n    }\n    /**\n     * Resume the CPU core.\n     */\n    resume() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (yield this.isHalted()) {\n                yield this.memory.write32(3758157104 /* DFSR */, 4 /* DFSR_DWTTRAP */ | 2 /* DFSR_BKPT */ | 1 /* DFSR_HALTED */);\n                yield this.debug.enable();\n            }\n        });\n    }\n    /**\n     * Find out whether the CPU is halted.\n     */\n    isHalted() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const s = yield this.status();\n            return s.isHalted;\n        });\n    }\n    /**\n     * Read the current status of the CPU.\n     *\n     * @returns Object containing the contents of the `DHCSR` register, the `DFSR` register, and a boolean value\n     * stating the current halted state of the CPU.\n     */\n    status() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = new prepared_1.PreparedMemoryCommand(this.dev);\n            prep.read32(3758157296 /* DHCSR */);\n            prep.read32(3758157104 /* DFSR */);\n            const results = yield prep.go();\n            const dhcsr = results[0];\n            const dfsr = results[1];\n            return {\n                dfsr,\n                dhscr: dhcsr,\n                isHalted: !!(dhcsr & 131072 /* S_HALT */),\n            };\n        });\n    }\n    /**\n     * Reset the CPU core. This currently does a software reset - it is also technically possible to perform a 'hard'\n     * reset using the reset pin from the debugger.\n     */\n    reset(halt = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (halt) {\n                yield this.halt();\n                // VC_CORERESET causes the core to halt on reset.\n                const demcr = yield this.memory.read32(3758157308 /* DEMCR */);\n                yield this.memory.write32(3758157308 /* DEMCR */, demcr | 1 /* DEMCR_VC_CORERESET */);\n                yield this.softwareReset();\n                yield this.waitForHalt();\n                // Unset the VC_CORERESET bit\n                yield this.memory.write32(3758157308 /* DEMCR */, demcr);\n            }\n            else {\n                yield this.softwareReset();\n            }\n        });\n    }\n    /**\n     * Run specified machine code natively on the device. Assumes usual C calling conventions\n     * - returns the value of r0 once the program has terminated. The program _must_ terminate\n     * in order for this function to return. This can be achieved by placing a `bkpt`\n     * instruction at the end of the function.\n     *\n     * @param code array containing the machine code (32-bit words).\n     * @param address memory address at which to place the code.\n     * @param pc initial value of the program counter.\n     * @param lr initial value of the link register.\n     * @param sp initial value of the stack pointer.\n     * @param upload should we upload the code before running it.\n     * @param args set registers r0...rn before running code\n     *\n     * @returns A promise for the value of r0 on completion of the function call.\n     */\n    runCode(code, address, pc, lr, sp, upload, ...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // await this.halt();\n            const cmd = this.prepareCommand();\n            cmd.halt();\n            // Point the program counter to the start of the program\n            cmd.writeCoreRegister(15 /* PC */, pc);\n            cmd.writeCoreRegister(14 /* LR */, lr);\n            cmd.writeCoreRegister(13 /* SP */, sp);\n            for (let i = 0; i < args.length; i++) {\n                cmd.writeCoreRegister(i, args[i]);\n            }\n            yield cmd.go();\n            // Write the program to memory at the specified address\n            if (upload) {\n                yield this.memory.writeBlock(address, code);\n            }\n            // Run the program and wait for halt\n            yield this.resume();\n            yield this.waitForHalt(constants_1.DEFAULT_RUNCODE_TIMEOUT); // timeout after 10s\n            return yield this.readCoreRegister(0 /* R0 */);\n        });\n    }\n    /**\n     * Spin until the chip has halted.\n     */\n    waitForHalt(timeout = 0) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                let running = true;\n                if (timeout > 0) {\n                    setTimeout(() => {\n                        reject(\"waitForHalt timed out.\");\n                        running = false;\n                    }, timeout);\n                }\n                while (running && !(yield this.isHalted())) {\n                    /* empty */\n                }\n                if (running) {\n                    resolve();\n                }\n            }));\n        });\n    }\n    softwareReset() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.memory.write32(3758157068 /* NVIC_AIRCR */, 100270080 /* NVIC_AIRCR_VECTKEY */ | 4 /* NVIC_AIRCR_SYSRESETREQ */);\n            // wait for the system to come out of reset\n            let dhcsr = yield this.memory.read32(3758157296 /* DHCSR */);\n            while ((dhcsr & 33554432 /* S_RESET_ST */) !== 0) {\n                dhcsr = yield this.memory.read32(3758157296 /* DHCSR */);\n            }\n        });\n    }\n}\nexports.CortexM = CortexM;\n\n\n\n},{\"../debug/debug\":7,\"../memory/memory\":8,\"../memory/prepared\":9,\"../util\":17,\"./constants\":1,\"./prepared\":3}],3:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prepared_1 = require(\"../memory/prepared\");\n/**\n * # Cortex M: Prepared Command\n *\n * Allows batching of Cortex M-related commands, such as writing to a register,\n * halting and resuming the core.\n *\n * ## Example\n *\n * When preparing the sequence of commands, we can use the same API to prepare\n * a command as we would to execute them immediately.\n *\n * ```typescript\n * // Note that only the .go method is asynchronous.\n *\n * const prep = core.prepareCommand();\n * prep.writeCoreRegister(CortexReg.R0, 0x1000);\n * prep.writeCoreRegister(CortexReg.R1, 0x0);\n * prep.writeCoreRegister(CortexReg.PC, 0x2000000);\n * prep.resume();\n * ```\n *\n * We can then execute them as efficiently as possible by combining them together\n * and executing them like so.\n *\n * ```typescript\n * await prep.go();\n * ```\n *\n * The code above is equivalent to the following _non-prepared_ command:\n *\n * ```typescript\n * await core.writeCoreRegister(CortexReg.R0, 0x1000);\n * await core.writeCoreRegister(CortexReg.R1, 0x0);\n * await core.writeCoreRegister(CortexReg.PC, 0x2000000);\n * await core.resume();\n * ```\n *\n * Since the batched version of this code avoids making three round-trips to the\n * target, we are able to significantly improve performance. This is especially\n * noticable when uploading a binary to flash memory, where are large number of\n * repetetive commands are being used.\n *\n * ## Explanation\n *\n * For a detailed explanation of why prepared commands are used in DAP.js, see the\n * documentation for `PreparedDapCommand`.\n */\nclass PreparedCortexMCommand {\n    constructor(dap) {\n        this.cmd = new prepared_1.PreparedMemoryCommand(dap);\n    }\n    /**\n     * Schedule a 32-bit integer to be written to a core register.\n     *\n     * @param no Core register to be written.\n     * @param val Value to write.\n     */\n    writeCoreRegister(no, val) {\n        this.cmd.write32(3758157304 /* DCRDR */, val);\n        this.cmd.write32(3758157300 /* DCRSR */, no | 65536 /* DCRSR_REGWnR */);\n    }\n    /**\n     * Schedule a halt command to be written to the CPU.\n     */\n    halt() {\n        this.cmd.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */);\n    }\n    /**\n     * Schedule a resume command to be written to the CPU.\n     */\n    resume() {\n        this.cmd.write32(3758157104 /* DFSR */, 4 /* DFSR_DWTTRAP */ | 2 /* DFSR_BKPT */ | 1 /* DFSR_HALTED */);\n    }\n    /**\n     * Execute all scheduled commands.\n     */\n    go() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.cmd.go();\n        });\n    }\n}\nexports.PreparedCortexMCommand = PreparedCortexMCommand;\n\n\n\n},{\"../memory/prepared\":9}],4:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prepared_1 = require(\"./prepared\");\nconst cmsis_dap_1 = require(\"../transport/cmsis_dap\");\nconst util_1 = require(\"../util\");\nclass DAP {\n    // private idcode: number;\n    constructor(device) {\n        this.device = device;\n        this.dap = new cmsis_dap_1.CMSISDAP(device);\n    }\n    reconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.dap.disconnect();\n            yield util_1.delay(100);\n            yield this.init();\n        });\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.dap.connect();\n            yield this.readDp(0 /* IDCODE */);\n            // const n = await this.readDp(Reg.IDCODE);\n            // this.idcode = n;\n            let prep = this.prepareCommand();\n            prep.writeReg(0 /* DP_0x0 */, 1 << 2); // clear sticky error\n            prep.writeDp(2 /* SELECT */, 0);\n            prep.writeDp(1 /* CTRL_STAT */, 1073741824 /* CSYSPWRUPREQ */ | 268435456 /* CDBGPWRUPREQ */);\n            const m = 536870912 /* CDBGPWRUPACK */ | 2147483648 /* CSYSPWRUPACK */;\n            prep.readDp(1 /* CTRL_STAT */);\n            let v = (yield prep.go())[0];\n            while ((v & m) !== m) {\n                v = yield this.readDp(1 /* CTRL_STAT */);\n            }\n            prep = this.prepareCommand();\n            prep.writeDp(1 /* CTRL_STAT */, (1073741824 /* CSYSPWRUPREQ */ |\n                268435456 /* CDBGPWRUPREQ */ |\n                0 /* TRNNORMAL */ |\n                3840 /* MASKLANE */));\n            prep.writeDp(2 /* SELECT */, 0);\n            prep.readAp(252 /* IDR */);\n            yield prep.go();\n        });\n    }\n    writeReg(regId, val) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.regOp(regId, val);\n        });\n    }\n    readReg(regId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const buf = yield this.regOp(regId, null);\n            const v = util_1.readUInt32LE(buf, 3);\n            return v;\n        });\n    }\n    prepareCommand() {\n        return new prepared_1.PreparedDapCommand(this.dap);\n    }\n    readDp(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.readReg(addr);\n        });\n    }\n    readAp(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.prepareCommand();\n            prep.writeDp(2 /* SELECT */, util_1.bank(addr));\n            prep.readReg(util_1.apReg(addr, 2 /* READ */));\n            return (yield prep.go())[0];\n        });\n    }\n    writeDp(addr, data) {\n        if (addr === 2 /* SELECT */) {\n            if (data === this.dpSelect) {\n                return Promise.resolve();\n            }\n            this.dpSelect = data;\n        }\n        return this.writeReg(addr, data);\n    }\n    writeAp(addr, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (addr === 0 /* CSW */) {\n                if (data === this.csw) {\n                    return Promise.resolve();\n                }\n                this.csw = data;\n            }\n            const prep = this.prepareCommand();\n            prep.writeDp(2 /* SELECT */, util_1.bank(addr));\n            prep.writeReg(util_1.apReg(addr, 0 /* WRITE */), data);\n            yield prep.go();\n        });\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.device.close();\n        });\n    }\n    readRegRepeat(regId, cnt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            util_1.assert(cnt <= 15);\n            const request = util_1.regRequest(regId);\n            const sendargs = [0, cnt];\n            for (let i = 0; i < cnt; ++i) {\n                sendargs.push(request);\n            }\n            const buf = yield this.dap.cmdNums(5 /* DAP_TRANSFER */, sendargs);\n            if (buf[1] !== cnt) {\n                throw new Error((\"(many) Bad #trans \" + buf[1]));\n            }\n            else if (buf[2] !== 1) {\n                throw new Error((\"(many) Bad transfer status \" + buf[2]));\n            }\n            return buf.subarray(3, 3 + cnt * 4);\n        });\n    }\n    writeRegRepeat(regId, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const remainingLength = 64 - 1 - 1 - 2 - 1; // 14\n            util_1.assert(data.length <= remainingLength / 4);\n            /*\n                BYTE | BYTE *****| SHORT**********| BYTE *************| WORD *********|\n              > 0x06 | DAP Index | Transfer Count | Transfer Request  | Transfer Data |\n                     |***********|****************|*******************|+++++++++++++++|\n            */\n            const request = util_1.regRequest(regId, true);\n            const sendargs = [0, data.length, 0, request];\n            data.forEach(d => {\n                // separate d into bytes\n                util_1.addInt32(sendargs, d);\n            });\n            const buf = yield this.dap.cmdNums(6 /* DAP_TRANSFER_BLOCK */, sendargs);\n            if (buf[3] !== 1) {\n                throw new Error((\"(many-wr) Bad transfer status \" + buf[2]));\n            }\n        });\n    }\n    regOp(regId, val) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = util_1.regRequest(regId, val !== null);\n            const sendargs = [0, 1, request];\n            if (val !== null) {\n                util_1.addInt32(sendargs, val);\n            }\n            const buf = yield this.dap.cmdNums(5 /* DAP_TRANSFER */, sendargs);\n            if (buf[1] !== 1) {\n                throw new Error((\"Bad #trans \" + buf[1]));\n            }\n            else if (buf[2] !== 1) {\n                if (buf[2] === 2) {\n                    throw new Error((\"Transfer wait\"));\n                }\n                throw new Error((\"Bad transfer status \" + buf[2]));\n            }\n            return buf;\n        });\n    }\n}\nexports.DAP = DAP;\n\n\n\n},{\"../transport/cmsis_dap\":15,\"../util\":17,\"./prepared\":5}],5:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../util\");\n/**\n * # Prepared DAP Command\n *\n * Batches together multiple Debug Access Port (DAP) commands into one (or more)\n * CMSIS-DAP Transfers that can be written together to improve link utilisation.\n *\n * > **NOTE:** this will not normally need to be used by applications or libraries\n * > depending on DAP.js.\n *\n * ## Architecture\n *\n * - `PreparedDapCommand` keeps a list of CMSIS-DAP `Transfer` commands.\n * - Every time an action is scheduled (writing to or reading from a DP or AP register),\n * we check to see if there is any remaining room in the current batch, starting a new\n * batch if none is available.\n * - When `go` is called, the batches are executed sequentially (so DAP commands are\n * executed in the order they were added).\n *\n * ### Reading Values\n *\n * Writing values to registers is relatively straight forward, however mixing register\n * reads and writes together requires us to keep track of how many commands in\n * each batch are read commands.\n *\n * Once data has successfully been read back from the target, the values read are assembled\n * into an array, and returned in the order they requested. This allows `PreparedDapCommand`s\n * to be used higher up the stack in places where multiple independent read operations take\n * place sequentially.\n *\n * ### Constructing CMSIS-DAP Commands\n *\n * We keep track of the number of commands in each batch, so that we can fill in the command\n * count field of the `DAP_Transfer`.\n */\nclass PreparedDapCommand {\n    constructor(dap) {\n        this.dap = dap;\n        this.commands = [[0, 1]];\n        this.commandCounts = [0];\n        this.currentCommand = 0;\n        this.readCounts = [0];\n    }\n    /**\n     * Schedule a value to be written to an AP or DP register.\n     *\n     * @param regId register ID to be written to\n     * @param value value to be written\n     */\n    writeReg(regId, value) {\n        const request = util_1.regRequest(regId, true);\n        if (this.commands[this.currentCommand].length + 5 > 64) {\n            // start a new command\n            this.commands.push([0, 1]);\n            this.commandCounts.push(0);\n            this.readCounts.push(0);\n            this.currentCommand++;\n        }\n        this.commands[this.currentCommand].push(request);\n        util_1.addInt32(this.commands[this.currentCommand], value);\n        this.commandCounts[this.currentCommand]++;\n    }\n    /**\n     * Schedule a value to be read from an AP or DP register.\n     * @param regId register to read from\n     */\n    readReg(regId) {\n        const request = util_1.regRequest(regId, false);\n        if (this.commands[this.currentCommand].length + 1 > 64) {\n            // start a new command\n            this.commands.push([0, 1]);\n            this.commandCounts.push(0);\n            this.readCounts.push(0);\n            this.currentCommand++;\n        }\n        this.commands[this.currentCommand].push(request);\n        this.commandCounts[this.currentCommand]++;\n        this.readCounts[this.currentCommand]++;\n    }\n    /**\n     * Schedule multiple values to be written to the same register.\n     *\n     * **TODO:** figure out dynamically whether it's better to use DAP_TransferBlock vs\n     * DAP_Transfer. We should be able to fill up the remaining space in a Transfer\n     * and then start a TransferBlock _if_ we can fit in _13 or more_ values into the\n     * TransferBlock. However, the gains from this are marginal unless we're using much\n     * larger packet sizes than 64 bytes.\n     *\n     * @param regId register to write to repeatedly\n     * @param data array of 32-bit values to be written\n     */\n    writeRegRepeat(regId, data) {\n        // fill up the rest of the command we have left\n        data.forEach(cmd => {\n            this.writeReg(regId, cmd);\n        });\n    }\n    /**\n     * Asynchronously execute the commands scheduled.\n     */\n    go() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const v = [];\n            for (let i = 0; i < this.commands.length; i++) {\n                const command = this.commands[i];\n                command[1] = this.commandCounts[i];\n                const result = yield this.dap.cmdNums(5 /* DAP_TRANSFER */, command);\n                for (let j = 0; j < this.readCounts[i]; j++) {\n                    v.push(util_1.readUInt32LE(result, 3 + 4 * j));\n                }\n            }\n            return v;\n        });\n    }\n    /**\n     * Schedule a value to be written to a DP register\n     *\n     * @param addr Address to write to\n     * @param data Data to be written\n     */\n    writeDp(addr, data) {\n        if (addr === 2 /* SELECT */) {\n            if (data === this.dpSelect) {\n                return Promise.resolve();\n            }\n            this.dpSelect = data;\n        }\n        return this.writeReg(addr, data);\n    }\n    /**\n     * Schedule a value to be written to an AP register\n     *\n     * @param addr Address to write to\n     * @param data Data to be written\n     */\n    writeAp(addr, data) {\n        this.writeDp(2 /* SELECT */, util_1.bank(addr));\n        if (addr === 0 /* CSW */) {\n            if (data === this.csw) {\n                return Promise.resolve();\n            }\n            this.csw = data;\n        }\n        this.writeReg(util_1.apReg(addr, 0 /* WRITE */), data);\n    }\n    /**\n     * Schedule a DP register to read from\n     *\n     * @param addr Address to read from\n     */\n    readDp(addr) {\n        return this.readReg(addr);\n    }\n    /**\n     * Schedule an AP register to read from\n     *\n     * @param addr Address to read from\n     */\n    readAp(addr) {\n        this.writeDp(2 /* SELECT */, util_1.bank(addr));\n        return this.readReg(util_1.apReg(addr, 2 /* READ */));\n    }\n}\nexports.PreparedDapCommand = PreparedDapCommand;\n\n\n\n},{\"../util\":17}],6:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass HWBreakpoint {\n    constructor(regAddr, parent, addr) {\n        this.regAddr = regAddr;\n        this.parent = parent;\n        this.addr = addr;\n    }\n    set() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /* set hardware breakpoint */\n            const bpMatch = ((this.addr & 0x2) ? 2 : 1) << 30;\n            yield this.parent.memory.write32(this.regAddr, this.addr & 0x1ffffffc | bpMatch | 1);\n        });\n    }\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /* clear hardware breakpoint */\n            yield this.parent.memory.write32(this.regAddr, 0);\n        });\n    }\n}\nexports.HWBreakpoint = HWBreakpoint;\nclass SWBreakpoint {\n    constructor(parent, addr) {\n        this.parent = parent;\n        this.addr = addr;\n    }\n    set() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // read the instruction from the CPU...\n            this.instruction = yield this.parent.memory.read16(this.addr);\n            yield this.parent.memory.write16(this.addr, SWBreakpoint.BKPT_INSTRUCTION);\n        });\n    }\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /* clear hardware breakpoint */\n            yield this.parent.memory.write16(this.addr, this.instruction);\n        });\n    }\n}\nSWBreakpoint.BKPT_INSTRUCTION = 0xbe00;\nexports.SWBreakpoint = SWBreakpoint;\n\n\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst breakpoint_1 = require(\"./breakpoint\");\n/**\n * # Debug Interface\n *\n * Keeps track of breakpoints set on the target, as well as deciding whether to\n * use a hardware breakpoint or a software breakpoint.\n *\n * ## Usage\n *\n * ```typescript\n * const dbg = core.debug;\n *\n * await dbg.setBreakpoint(0x123456);\n *\n * // resume the core and wait for the breakpoint\n * await core.resume();\n * await core.waitForHalt();\n *\n * // step forward one instruction\n * await dbg.step();\n *\n * // remove the breakpoint\n * await dbg.deleteBreakpoint(0x123456);\n * ```\n */\nclass Debug {\n    constructor(core) {\n        this.core = core;\n        this.enabled = false;\n        this.availableHWBreakpoints = [];\n        this.breakpoints = new Map();\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.setupFpb();\n        });\n    }\n    /**\n     * Enable debugging on the target CPU\n     */\n    enable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */);\n        });\n    }\n    /**\n     * Set breakpoints at specified memory addresses.\n     *\n     * @param addrs An array of memory addresses at which to set breakpoints.\n     */\n    setBreakpoint(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.breakpoints.has(addr)) {\n                // we already have a breakpoint there.\n                const breakpoint = this.breakpoints.get(addr);\n                if (typeof breakpoint !== \"number\") {\n                    // already enabled\n                    // tslint:disable-next-line:no-console\n                    console.warn(`Breakpoint at ${addr.toString(16)} already enabled.`);\n                    return;\n                }\n            }\n            let bkpt;\n            // choose where best to place a breakpoint\n            if (addr < 0x20000000) {\n                // we can use a HWBreakpoint\n                if (this.availableHWBreakpoints.length > 0) {\n                    if (!this.enabled) {\n                        yield this.setFpbEnabled(true);\n                    }\n                    const regAddr = this.availableHWBreakpoints.pop();\n                    bkpt = new breakpoint_1.HWBreakpoint(regAddr, this.core, addr);\n                }\n                else {\n                    bkpt = new breakpoint_1.SWBreakpoint(this.core, addr);\n                }\n            }\n            else {\n                bkpt = new breakpoint_1.SWBreakpoint(this.core, addr);\n            }\n            yield bkpt.set();\n            this.breakpoints.set(addr, bkpt);\n        });\n    }\n    deleteBreakpoint(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.breakpoints.has(addr)) {\n                const bkpt = this.breakpoints.get(addr);\n                if (typeof bkpt !== \"number\") {\n                    yield bkpt.clear();\n                    if (bkpt instanceof breakpoint_1.HWBreakpoint) {\n                        // return the register address to the pool\n                        this.availableHWBreakpoints.push(bkpt.regAddr);\n                    }\n                }\n                this.breakpoints.delete(addr);\n            }\n            else {\n                // tslint:disable-next-line:no-console\n                console.warn(`Breakpoint at ${addr.toString(16)} does not exist.`);\n            }\n        });\n    }\n    /**\n     * Step the processor forward by one instruction.\n     */\n    step() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const dhcsr = yield this.core.memory.read32(3758157296 /* DHCSR */);\n            if (!(dhcsr & (4 /* C_STEP */ | 2 /* C_HALT */))) {\n                // tslint:disable-next-line:no-console\n                console.error(\"Target is not halted.\");\n                return;\n            }\n            const interruptsMasked = (8 /* C_MASKINTS */ & dhcsr) !== 0;\n            if (!interruptsMasked) {\n                yield this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ |\n                    1 /* C_DEBUGEN */ |\n                    2 /* C_HALT */ |\n                    8 /* C_MASKINTS */);\n            }\n            yield this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ |\n                1 /* C_DEBUGEN */ |\n                8 /* C_MASKINTS */ |\n                4 /* C_STEP */);\n            yield this.core.waitForHalt();\n            yield this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ |\n                1 /* C_DEBUGEN */ |\n                2 /* C_HALT */);\n        });\n    }\n    /**\n     * Set up (and disable) the Flash Patch & Breakpoint unit. It will be enabled when\n     * the first breakpoint is set.\n     *\n     * Also reads the number of available hardware breakpoints.\n     */\n    setupFpb() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // setup FPB (breakpoint)\n            const fpcr = yield this.core.memory.read32(3758104576 /* FP_CTRL */);\n            const nbCode = ((fpcr >> 8) & 0x70) | ((fpcr >> 4) & 0xf);\n            // const nbLit = (fpcr >> 7) & 0xf;\n            // this.totalHWBreakpoints = nbCode;\n            yield this.setFpbEnabled(false);\n            for (let i = 0; i < nbCode; i++) {\n                this.availableHWBreakpoints.push(3758104584 /* FP_COMP0 */ + (4 * i));\n                yield this.core.memory.write32(3758104584 /* FP_COMP0 */ + (i * 4), 0);\n            }\n        });\n    }\n    /**\n     * Enable or disable the Flash Patch and Breakpoint unit (FPB).\n     *\n     * @param enabled\n     */\n    setFpbEnabled(enabled = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.enabled = enabled;\n            yield this.core.memory.write32(3758104576 /* FP_CTRL */, 2 /* FP_CTRL_KEY */ | (enabled ? 1 : 0));\n        });\n    }\n}\nexports.Debug = Debug;\n\n\n\n},{\"./breakpoint\":6}],8:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../util\");\nconst prepared_1 = require(\"./prepared\");\n/**\n * # Memory Interface\n *\n * Controls access to the target's memory.\n *\n * ## Usage\n *\n * Using an instance of `CortexM`, as described before, we can simply read and\n * write numbers to memory as follows:\n *\n * ```typescript\n * const mem = core.memory;\n *\n * // NOTE: the address parameter must be word (4-byte) aligned.\n * await mem.write32(0x200000, 12345);\n * const val = await mem.read32(0x200000);\n *\n * // val === 12345\n *\n * // NOTE: the address parameter must be half-word (2-byte) aligned\n * await mem.write16(0x2000002, 65534);\n * const val16 = await mem.read16(0x2000002);\n *\n * // val16 === 65534\n * ```\n *\n * To write a larger block of memory, we can use `readBlock` and `writeBlock`. Again,\n * these blocks must be written to word-aligned addresses in memory.\n *\n * ```typescript\n * const data = new Uint32Array([0x1234, 0x5678, 0x9ABC, 0xDEF0]);\n * await mem.writeBlock(0x200000, data);\n *\n * const readData = await mem.readBlock(0x200000, data.length, 0x100);\n * ```\n *\n * ## See also\n *\n * `PreparedMemoryCommand` provides an equivalent API with better performance (in some\n * cases) by enabling batched memory operations.\n */\nclass Memory {\n    constructor(dev) {\n        this.dev = dev;\n    }\n    /**\n     * Write a 32-bit word to the specified (word-aligned) memory address.\n     *\n     * @param addr Memory address to write to\n     * @param data Data to write (values above 2**32 will be truncated)\n     */\n    write32(addr, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n            prep.writeAp(4 /* TAR */, addr);\n            prep.writeAp(12 /* DRW */, data);\n            yield prep.go();\n        });\n    }\n    /**\n     * Write a 16-bit word to the specified (half word-aligned) memory address.\n     *\n     * @param addr Memory address to write to\n     * @param data Data to write (values above 2**16 will be truncated)\n     */\n    write16(addr, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            data = data << ((addr & 0x02) << 3);\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\n            prep.writeAp(4 /* TAR */, addr);\n            prep.writeAp(12 /* DRW */, data);\n            yield prep.go();\n        });\n    }\n    /**\n     * Read a 32-bit word from the specified (word-aligned) memory address.\n     *\n     * @param addr Memory address to read from.\n     */\n    read32(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n            prep.writeAp(4 /* TAR */, addr);\n            prep.readAp(12 /* DRW */);\n            try {\n                return (yield prep.go())[0];\n            }\n            catch (e) {\n                // transfer wait, try again.\n                yield util_1.delay(100);\n                return yield this.read32(addr);\n            }\n        });\n    }\n    /**\n     * Read a 16-bit word from the specified (half word-aligned) memory address.\n     *\n     * @param addr Memory address to read from.\n     */\n    read16(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\n            prep.writeAp(4 /* TAR */, addr);\n            prep.readAp(12 /* DRW */);\n            let val;\n            try {\n                val = (yield prep.go())[0];\n            }\n            catch (e) {\n                // transfer wait, try again.\n                yield util_1.delay(100);\n                val = yield this.read16(addr);\n            }\n            val = (val >> ((addr & 0x02) << 3) & 0xffff);\n            return val;\n        });\n    }\n    /**\n     * Reads a block of memory from the specified memory address.\n     *\n     * @param addr Address to read from\n     * @param words Number of words to read\n     * @param pageSize Memory page size\n     */\n    readBlock(addr, words, pageSize) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const funs = [() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(); })];\n            const bufs = [];\n            const end = addr + words * 4;\n            let ptr = addr;\n            while (ptr < end) {\n                let nextptr = ptr + pageSize;\n                if (ptr === addr) {\n                    nextptr &= ~(pageSize - 1);\n                }\n                const len = Math.min(nextptr - ptr, end - ptr);\n                const ptr0 = ptr;\n                util_1.assert((len & 3) === 0);\n                funs.push(() => __awaiter(this, void 0, void 0, function* () {\n                    bufs.push(yield this.readBlockCore(ptr0, len >> 2));\n                }));\n                ptr = nextptr;\n            }\n            for (const f of funs) {\n                yield f();\n            }\n            const result = yield util_1.bufferConcat(bufs);\n            return result.subarray(0, words * 4);\n        });\n    }\n    /**\n     * Write a block of memory to the specified memory address.\n     *\n     * @param addr Memory address to write to.\n     * @param words Array of 32-bit words to write to memory.\n     */\n    writeBlock(addr, words) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (words.length === 0) {\n                return;\n            }\n            return this.writeBlockCore(addr, words);\n        });\n    }\n    prepareCommand() {\n        return new prepared_1.PreparedMemoryCommand(this.dev);\n    }\n    readBlockCore(addr, words) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n            prep.writeAp(4 /* TAR */, addr);\n            yield prep.go();\n            let lastSize = words % 15;\n            if (lastSize === 0) {\n                lastSize = 15;\n            }\n            const blocks = [];\n            for (let i = 0; i < Math.ceil(words / 15); i++) {\n                const b = yield this.dev.readRegRepeat(util_1.apReg(12 /* DRW */, 2 /* READ */), i === blocks.length - 1 ? lastSize : 15);\n                blocks.push(b);\n            }\n            return util_1.bufferConcat(blocks);\n        });\n    }\n    writeBlockCore(addr, words) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const blSz = 14;\n                const reg = util_1.apReg(12 /* DRW */, 0 /* WRITE */);\n                const prep = this.dev.prepareCommand();\n                prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n                prep.writeAp(4 /* TAR */, addr);\n                for (let i = 0; i < Math.ceil(words.length / blSz); i++) {\n                    prep.writeRegRepeat(reg, words.subarray(i * blSz, i * blSz + blSz));\n                }\n                yield prep.go();\n            }\n            catch (e) {\n                if (e.dapWait) {\n                    yield util_1.delay(100);\n                    return yield this.writeBlockCore(addr, words);\n                }\n                else {\n                    throw e;\n                }\n            }\n        });\n    }\n}\nexports.Memory = Memory;\n\n\n\n},{\"../util\":17,\"./prepared\":9}],9:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # Prepared Memory Command\n *\n * Allows multiple memory operations to be batched together to improve HID\n * interface utilisation.\n *\n * ## Usage\n *\n * Similarly to `CortexMPreparedCommand` and `DapPreparedCommand`, a convenience\n * function exists to quickly create a prepared memory command:\n *\n * ```typescript\n * const prep = core.memory.prepareCommand();\n * ```\n *\n * You can then construct the sequence of commands using the same API as `Memory`.\n *\n * ```typescript\n * prep.write32(0x20000, 1234);\n * prep.write32(0x12344, 5678);\n * prep.write16(0x12346, 123);\n * ```\n *\n * And then dispatch the prepared commands asynchronously:\n *\n * ```typescript\n * await prep.go();\n * ```\n */\nclass PreparedMemoryCommand {\n    constructor(dap) {\n        this.cmd = dap.prepareCommand();\n    }\n    /**\n     * Schedule a 32-bit memory write operation.\n     *\n     * @param addr Word-aligned memory address to write to.\n     * @param data Number to be written.\n     */\n    write32(addr, data) {\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n        this.cmd.writeAp(4 /* TAR */, addr);\n        this.cmd.writeAp(12 /* DRW */, data);\n    }\n    /**\n     * Schedule a 16-bit memory write operation.\n     *\n     * @param addr Half word-aligned memory address to write to.\n     * @param data Number to be written.\n     */\n    write16(addr, data) {\n        data = data << ((addr & 0x02) << 3);\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\n        this.cmd.writeAp(4 /* TAR */, addr);\n        this.cmd.writeAp(12 /* DRW */, data);\n    }\n    /**\n     * Schedule a 32-bit memory read operation.\n     *\n     * @param addr Word-aligned memory address to read from.\n     */\n    read32(addr) {\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n        this.cmd.writeAp(4 /* TAR */, addr);\n        this.cmd.readAp(12 /* DRW */);\n    }\n    /**\n     * Schedule a 16-bit memory read operation.\n     *\n     * FIXME: the values need to be shifted after being read.\n     *\n     * @param addr Half word-aligned memory address to read from.\n     */\n    read16(addr) {\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\n        this.cmd.writeAp(4 /* TAR */, addr);\n        this.cmd.readAp(12 /* DRW */);\n    }\n    /**\n     * Execute all commands asynchronously.\n     */\n    go() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.cmd.go();\n        });\n    }\n}\nexports.PreparedMemoryCommand = PreparedMemoryCommand;\n\n\n\n},{}],10:[function(require,module,exports){\n(function (Buffer){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MemoryMap = require(\"nrf-intel-hex\");\nconst util_1 = require(\"../util\");\nclass FlashSection {\n    constructor(address, data) {\n        this.address = address;\n        this.data = data;\n        /* empty */\n    }\n    toString() {\n        return `${this.data.byteLength} bytes @ ${this.address.toString(16)}`;\n    }\n}\nexports.FlashSection = FlashSection;\n/**\n * # Flash Program\n *\n * Represents a program to be flashed to memory as a series of disjoint sections\n * in memory/flash.\n *\n * ## Usage\n *\n * Use with a hex file is as simple as loading it from disk, and calling `fromIntelHex`.\n *\n * ```typescript\n * const hexFile = \"microbit.hex\";\n * const hexData = fs.readFileSync(hexFile, { encoding: 'utf-8' });\n *\n * const program = FlashProgram.fromIntelHex(hexData);\n * core.program(program, (progress) => {\n *     console.log(`Flash progress: ${progress * 100}%`);\n * });\n * ```\n *\n * When used with a binary file, you must make sure that the file is stored in a\n * Uint32Array, and you must provide a base address for the binary to be written to.\n * The base address is commonly zero.\n */\nclass FlashProgram {\n    constructor(sections) {\n        this.sections = sections;\n    }\n    static fromArrayBuffer(buffer) {\n        if (util_1.isBufferBinary(buffer)) {\n            return FlashProgram.fromBinary(0, new Uint32Array(buffer));\n        }\n        const bufferString = Buffer.from(buffer).toString(\"utf8\");\n        return FlashProgram.fromIntelHex(bufferString);\n    }\n    static fromIntelHex(hex) {\n        const hexMemory = MemoryMap.fromHex(hex);\n        const flashSections = [];\n        hexMemory.forEach((value, key) => {\n            flashSections.push(new FlashSection(key, new Uint32Array(value.buffer)));\n        });\n        return new FlashProgram(flashSections);\n    }\n    static fromBinary(addr, bin) {\n        return new FlashProgram([new FlashSection(addr, bin)]);\n    }\n    totalByteLength() {\n        return this.sections.map(s => s.data.byteLength).reduce((x, y) => x + y);\n    }\n    toString() {\n        return this.sections.toString();\n    }\n}\nexports.FlashProgram = FlashProgram;\n\n\n\n}).call(this,require(\"buffer\").Buffer)\n},{\"../util\":17,\"buffer\":20,\"nrf-intel-hex\":22}],11:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cortex_1 = require(\"../cortex/cortex\");\nconst K64F_1 = require(\"./K64F\");\nconst NRF51_1 = require(\"./NRF51\");\n/**\n * Analyzer code blob, from PyOCD. This can be used to compute a table of CRC\n * values. See https://github.com/mbedmicro/pyOCD/tree/master/src/analyzer.\n */\nconst analyzer = new Uint32Array([\n    0x2180468c, 0x2600b5f0, 0x4f2c2501, 0x447f4c2c, 0x1c2b0049, 0x425b4033, 0x40230872, 0x085a4053,\n    0x425b402b, 0x40534023, 0x402b085a, 0x4023425b, 0x085a4053, 0x425b402b, 0x40534023, 0x402b085a,\n    0x4023425b, 0x085a4053, 0x425b402b, 0x40534023, 0x402b085a, 0x4023425b, 0x085a4053, 0x425b402b,\n    0x40534023, 0xc7083601, 0xd1d2428e, 0x2b004663, 0x4663d01f, 0x46b4009e, 0x24ff2701, 0x44844d11,\n    0x1c3a447d, 0x88418803, 0x4351409a, 0xd0122a00, 0x22011856, 0x780b4252, 0x40533101, 0x009b4023,\n    0x0a12595b, 0x42b1405a, 0x43d2d1f5, 0x4560c004, 0x2000d1e7, 0x2200bdf0, 0x46c0e7f8, 0x000000b6,\n    0xedb88320, 0x00000044,\n]);\n/**\n * # Flash Target\n *\n * Represents a target device containing a flash region. In rare cases that a\n * target chip only has RAM, uploading a program is as simple as writing a\n * block of data to memory.\n *\n * ## Usage\n *\n * Initialising the `FlashTarget` object is the same as configuring a Cortex-M\n * object, but with an additional parameter for the platform (contains the\n * flashing algorithm and memory layout).\n *\n * ```typescript\n * import {K64F, DAP, FlashTarget} from \"dapjs\";\n *\n * // make sure hid is an object implementing the `IHID` interface.\n * const dap = new DAP(hid);\n * const device = new FlashTarget(dap, K64F);\n * ```\n *\n * Now, we can do all of the operations you'd expect. As usual, these examples\n * work in a function marked `async`. Alternatively, they can be implemented\n * using Promises directly.\n *\n * ```typescript\n * await device.eraseChip();\n *\n * // flash a hex program\n *\n * ```\n */\nclass FlashTarget extends cortex_1.CortexM {\n    constructor(device, platform) {\n        super(device);\n        this.platform = platform;\n        this.inited = false;\n    }\n    /**\n     * Initialise the flash driver on the chip. Must be called before any of the other\n     * flash-related methods.\n     */\n    flashInit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.inited) {\n                return;\n            }\n            // reset and halt\n            yield this.reset(true);\n            // make sure we're in Thumb mode.\n            yield this.writeCoreRegister(16 /* XPSR */, 1 << 24);\n            yield this.writeCoreRegister(9 /* R9 */, this.platform.flashAlgo.staticBase);\n            // upload analyzer\n            if (this.platform.flashAlgo.analyzerSupported) {\n                yield this.memory.writeBlock(this.platform.flashAlgo.analyzerAddress, analyzer);\n            }\n            const result = yield this.runCode(this.platform.flashAlgo.instructions, this.platform.flashAlgo.loadAddress, this.platform.flashAlgo.pcInit, this.platform.flashAlgo.loadAddress + 1, this.platform.flashAlgo.stackPointer, true, 0, 0, 0, 0);\n            this.inited = true;\n            return result;\n        });\n    }\n    /**\n     * Erase _all_ data stored in flash on the chip.\n     */\n    eraseChip() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.inited) {\n                yield this.flashInit();\n            }\n            const result = yield this.runCode(this.platform.flashAlgo.instructions, this.platform.flashAlgo.loadAddress, this.platform.flashAlgo.pcEraseAll, this.platform.flashAlgo.loadAddress + 1, this.platform.flashAlgo.stackPointer, false, 0, 0, 0);\n            return result;\n        });\n    }\n    /**\n     * Flash a contiguous block of data to flash at a specified address.\n     *\n     * @param data Array of 32-bit integers to write to flash.\n     * @param address Memory address in flash to write to.\n     * @param progressCb Callback to keep track of progress through upload (from 0.0 to 1.0)\n     */\n    flash(data, address, progressCb) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.inited) {\n                yield this.flashInit();\n            }\n            const pageSizeWords = this.platform.flashAlgo.pageSize / 4;\n            const bufferAddress = this.platform.flashAlgo.pageBuffers[0];\n            const flashStart = address || this.platform.flashAlgo.flashStart;\n            // How far through `data` are we (in bytes)\n            let ptr = 0;\n            while (ptr < data.byteLength) {\n                const wordPtr = ptr / 4;\n                const pageData = data.subarray(wordPtr, wordPtr + pageSizeWords);\n                const flashAddress = flashStart + ptr;\n                yield this.memory.writeBlock(bufferAddress, pageData);\n                yield this.runCode(this.platform.flashAlgo.instructions, this.platform.flashAlgo.loadAddress, this.platform.flashAlgo.pcProgramPage, // pc\n                this.platform.flashAlgo.loadAddress + 1, // lr\n                this.platform.flashAlgo.stackPointer, // sp\n                /* upload? */\n                false, \n                /* args */\n                flashAddress, this.platform.flashAlgo.pageSize, bufferAddress);\n                if (progressCb) {\n                    progressCb(ptr / data.byteLength);\n                }\n                ptr += pageData.byteLength;\n            }\n            if (progressCb) {\n                progressCb(1.0);\n            }\n        });\n    }\n    /**\n     * Upload a program consisting of one or more disjoint sections to flash.\n     *\n     * @param program Program to be uploaded\n     * @param progressCb Callback to receive progress updates (from 0.0 to 1.0)\n     */\n    program(program, progressCb) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.flashInit();\n            yield this.eraseChip();\n            const totalBytes = program.totalByteLength();\n            let cumulativeBytes = 0;\n            // const startTime = Date.now();\n            for (const section of program.sections) {\n                yield this.flash(section.data, section.address, progress => {\n                    const sectionBytes = section.data.byteLength * progress;\n                    progressCb((cumulativeBytes + sectionBytes) / totalBytes);\n                });\n                cumulativeBytes += section.data.byteLength;\n            }\n            // const endTime = Date.now();\n            // const elapsedTime = endTime - startTime;\n            // const transferRate = totalBytes / elapsedTime; // B/ms == kB/s\n            yield this.flashUnInit();\n            progressCb(1.0);\n        });\n    }\n    /**\n     * Un-init the flash algorithm. Commonly, we use this to ensure that the flashing\n     * algorithms are re-uploaded after resets.\n     */\n    flashUnInit() {\n        this.inited = false;\n    }\n}\nexports.FlashTarget = FlashTarget;\n/**\n * Map of mbed device codes to platform objects. Can be used by applications\n * to dynamically select flashing algorithm based on the devices connected to\n * the computer.\n *\n * > *TODO:* extend the mbed devices API to include data stored here, so that we can\n * > expand to cover all devices without needing to update DAP.js.\n */\nexports.FlashTargets = new Map();\nexports.FlashTargets.set(\"0240\", new K64F_1.K64F());\nexports.FlashTargets.set(\"9900\", new NRF51_1.NRF51());\nexports.FlashTargets.set(\"1100\", new NRF51_1.NRF51());\n\n\n\n},{\"../cortex/cortex\":2,\"./K64F\":12,\"./NRF51\":13}],12:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst K64F_FLASH_ALGO = {\n    analyzerAddress: 0x1ffff000,\n    analyzerSupported: true,\n    flashSize: 0x100000,\n    flashStart: 0x0,\n    // Flash algorithm as a hex string\n    instructions: new Uint32Array([\n        0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,\n        0x4604b570, 0x4616460d, 0x5020f24c, 0x81c84932, 0x1028f64d, 0x460881c8, 0xf0208800, 0x80080001,\n        0x4448482e, 0xf8dcf000, 0x2001b108, 0x2000bd70, 0x4601e7fc, 0x47702000, 0x4929b510, 0x44484827,\n        0xf8b8f000, 0xb92c4604, 0x48242100, 0xf0004448, 0x4604f9a9, 0xf837f000, 0xbd104620, 0x4604b570,\n        0x4448481e, 0x46214b1e, 0xf00068c2, 0x4605f85d, 0x481ab93d, 0x23004448, 0x68c24621, 0xf946f000,\n        0xf0004605, 0x4628f820, 0xb5febd70, 0x460c4605, 0x46234616, 0x46294632, 0x44484810, 0xf8f8f000,\n        0xb9674607, 0x22012000, 0x2000e9cd, 0x46224633, 0x90024629, 0x44484809, 0xf984f000, 0xf0004607,\n        0x4638f802, 0x4807bdfe, 0xf4206840, 0xf5000070, 0x49040070, 0x47706048, 0x40052000, 0x00000004,\n        0x6b65666b, 0x4001f000, 0x4a0e2070, 0x20807010, 0xbf007010, 0x7800480b, 0x280009c0, 0x4809d0fa,\n        0xf0017801, 0xb1080020, 0x47702067, 0x0010f001, 0x2068b108, 0xf001e7f9, 0xb1080001, 0xe7f42069,\n        0xe7f22000, 0x40020000, 0x4df0e92d, 0x460d4604, 0x469a4690, 0xf0004650, 0x4606f891, 0x4630b116,\n        0x8df0e8bd, 0x46422310, 0x46204629, 0xf86cf000, 0xb10e4606, 0xe7f34630, 0x0008eb05, 0x68e01e47,\n        0xf1f0fbb7, 0x7011fb00, 0x68e0b140, 0xf0f0fbb7, 0x0b01f100, 0xfb0068e0, 0x1e47f00b, 0x480be011,\n        0x68004478, 0x20096005, 0x71c84909, 0xffacf7ff, 0x69a04606, 0x69a0b108, 0xb1064780, 0x68e0e003,\n        0x42bd4405, 0xbf00d9eb, 0xe7c94630, 0x000002ec, 0x40020000, 0x4604b570, 0x4628460d, 0xf84ef000,\n        0xb10e4606, 0xbd704630, 0x2004b90c, 0x2044e7fb, 0x71c84902, 0xff88f7ff, 0x0000e7f5, 0x40020000,\n        0xb9094601, 0x47702004, 0x6cc04826, 0x6003f3c0, 0x447b4b25, 0x0010f833, 0xb90a0302, 0xe7f22064,\n        0x60082000, 0x2002604a, 0x02c06088, 0x200060c8, 0x61486108, 0xbf006188, 0x4602e7e5, 0x2004b90a,\n        0x61914770, 0xe7fb2000, 0x4604b530, 0x2004b90c, 0x1e58bd30, 0xb9104008, 0x40101e58, 0x2065b108,\n        0x6820e7f6, 0xd8054288, 0x0500e9d4, 0x188d4428, 0xd20142a8, 0xe7eb2066, 0xe7e92000, 0x480b4601,\n        0xd0014281, 0x4770206b, 0xe7fc2000, 0xb90b4603, 0x47702004, 0xd801290f, 0xd0012a04, 0xe7f82004,\n        0xe7f62000, 0x40048000, 0x0000025a, 0x6b65666b, 0x41f0e92d, 0x46884607, 0x461d4614, 0x2004b914,\n        0x81f0e8bd, 0x462a2308, 0x46384641, 0xffbcf7ff, 0xb10e4606, 0xe7f34630, 0x4812e01f, 0x68004478,\n        0x8000f8c0, 0x490fcc01, 0x390c4479, 0x60486809, 0x490ccc01, 0x39184479, 0x60886809, 0x490a2007,\n        0xf7ff71c8, 0x4606ff01, 0xb10869b8, 0x478069b8, 0xe004b106, 0x0808f108, 0x2d003d08, 0xbf00d1dd,\n        0xe7cd4630, 0x000001b0, 0x40020000, 0x4dffe92d, 0x4682b082, 0x2310460c, 0x46504621, 0xf7ff9a04,\n        0x4683ff83, 0x0f00f1bb, 0x4658d003, 0xe8bdb006, 0xe9da8df0, 0xfbb00101, 0x4260f7f1, 0x40084279,\n        0x42a54245, 0x443dd100, 0xe0229e04, 0x0804eba5, 0xd90045b0, 0xea4f46b0, 0x90011018, 0x4478480f,\n        0x60046800, 0x490e2001, 0x980171c8, 0x72c80a00, 0x72889801, 0x72489805, 0xfeb6f7ff, 0xf1bb4683,\n        0xd0010f00, 0xe7d14658, 0x0608eba6, 0x443d4444, 0x2e00bf00, 0x2000d1da, 0x0000e7c8, 0x0000010e,\n        0x40020000, 0x4604b570, 0xb90c460d, 0xbd702004, 0x49032040, 0x460871c8, 0xf7ff7185, 0xe7f6fe95,\n        0x40020000, 0x4dffe92d, 0x4617460c, 0xe9dd461d, 0xf8ddb80c, 0xb91da038, 0xb0042004, 0x8df0e8bd,\n        0x463a2304, 0x98004621, 0xff1ef7ff, 0xb10e4606, 0xe7f24630, 0x4814e022, 0x68004478, 0x20026004,\n        0x71c84912, 0xf8804608, 0x490fb00b, 0x39144479, 0x68096828, 0xf7ff6088, 0x4606fe67, 0xf1b8b15e,\n        0xd0010f00, 0x4000f8c8, 0x0f00f1ba, 0x2000d002, 0x0000f8ca, 0x1f3fe004, 0x1d241d2d, 0xd1da2f00,\n        0x4630bf00, 0x0000e7c9, 0x00000074, 0x40020000, 0x00000000, 0x00080000, 0x00100000, 0x00200000,\n        0x00400000, 0x00800000, 0x01000000, 0x01000000, 0x40020004, 0x00000000,\n    ]),\n    loadAddress: 0x20000000,\n    pageBuffers: [0x20003000, 0x20004000],\n    pageSize: 0x1000,\n    // Relative function addresses\n    pcEraseAll: 0x20000059,\n    pcEraseSector: 0x2000007D,\n    pcInit: 0x20000021,\n    // pcUnInit: 0x49,\n    pcProgramPage: 0x200000AB,\n    stackPointer: 0x20001000,\n    staticBase: 0x20000000 + 0x20 + 0x474,\n};\nclass K64F {\n    constructor() {\n        this.flashAlgo = K64F_FLASH_ALGO;\n    }\n    overrideSecurityBits(address, data) {\n        const u8data = new Uint8Array(data.buffer);\n        // Kinetis security values and addresses\n        const SECURITY_START = 0x400;\n        const SECURITY_SIZE = 16;\n        const FPROT_ADDR = 0x408;\n        const FPROT_ADDR_END = 0x40c;\n        // const FPROT_SIZE = 4;\n        const FSEC_ADDR = 0x40c;\n        const FSEC_VAL = 0xFE;\n        // const FOPT_ADDR = 0x40d;\n        // const FOPT_VAL = 0xFF;\n        const FEPROT_ADDR = 0x40e;\n        const FEPROT_VAL = 0xFF;\n        const FDPROT_ADDR = 0x40f;\n        const FDPROT_VAL = 0xFF;\n        if (address <= SECURITY_START && address + u8data.byteLength > SECURITY_START + SECURITY_SIZE) {\n            for (let i = FPROT_ADDR; i < FPROT_ADDR_END; i++) {\n                if (u8data[i - address] !== 0xff) {\n                    u8data[i - address] = 0xff;\n                }\n            }\n            if (u8data[FSEC_ADDR - address] !== FSEC_VAL) {\n                u8data[FSEC_ADDR - address] = FSEC_VAL;\n            }\n            // if (u8data[FOPT_ADDR - address] === 0x00) {\n            // }\n            if (u8data[FEPROT_ADDR - address] !== FEPROT_VAL) {\n                u8data[FEPROT_ADDR - address] = FEPROT_VAL;\n            }\n            if (u8data[FDPROT_ADDR - address] !== FDPROT_VAL) {\n                u8data[FDPROT_ADDR - address] = FDPROT_VAL;\n            }\n        }\n    }\n}\nexports.K64F = K64F;\n\n\n\n},{}],13:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NRF51_FLASH_ALGO = {\n    analyzerAddress: 0x20003000,\n    analyzerSupported: true,\n    beginData: 0x20002000,\n    flashSize: 0x40000,\n    flashStart: 0x0,\n    instructions: new Uint32Array([\n        0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,\n        0x47702000, 0x47702000, 0x4c26b570, 0x60602002, 0x60e02001, 0x68284d24, 0xd00207c0, 0x60602000,\n        0xf000bd70, 0xe7f6f82c, 0x4c1eb570, 0x60612102, 0x4288491e, 0x2001d302, 0xe0006160, 0x4d1a60a0,\n        0xf81df000, 0x07c06828, 0x2000d0fa, 0xbd706060, 0x4605b5f8, 0x4813088e, 0x46142101, 0x4f126041,\n        0xc501cc01, 0x07c06838, 0x1e76d006, 0x480dd1f8, 0x60412100, 0xbdf84608, 0xf801f000, 0x480ce7f2,\n        0x06006840, 0xd00b0e00, 0x6849490a, 0xd0072900, 0x4a0a4909, 0xd00007c3, 0x1d09600a, 0xd1f90840,\n        0x00004770, 0x4001e500, 0x4001e400, 0x10001000, 0x40010400, 0x40010500, 0x40010600, 0x6e524635,\n        0x00000000,\n    ]),\n    loadAddress: 0x20000000,\n    minProgramLength: 4,\n    pageBuffers: [0x20002000, 0x20002400],\n    pageSize: 0x400,\n    pcEraseAll: 0x20000029,\n    pcEraseSector: 0x20000049,\n    pcInit: 0x20000021,\n    pcProgramPage: 0x20000071,\n    stackPointer: 0x20001000,\n    staticBase: 0x20000170,\n};\nclass NRF51 {\n    constructor() {\n        this.flashAlgo = NRF51_FLASH_ALGO;\n    }\n    overrideSecurityBits(_address, _data) {\n        /* empty */\n    }\n}\nexports.NRF51 = NRF51;\n\n\n\n},{}],14:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass PlatformSelector {\n    constructor() {\n        this.deviceCache = new Map();\n    }\n    lookupDevice(code) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.deviceCache.has(code)) {\n                return this.deviceCache.get(code);\n            }\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"get\", `https://os.mbed.com/api/v3/platforms/${code}/`, true);\n            xhr.responseType = \"json\";\n            return new Promise((resolve, _reject) => {\n                xhr.onload = (_e) => {\n                    const device = {\n                        id: xhr.response.id,\n                        name: xhr.response.name,\n                        productCode: xhr.response.productcode,\n                    };\n                    this.deviceCache.set(code, device);\n                    resolve(device);\n                };\n                xhr.send();\n            });\n        });\n    }\n}\nexports.PlatformSelector = PlatformSelector;\n\n\n\n},{}],15:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../util\");\nclass CMSISDAP {\n    // private maxSent = 1;\n    constructor(hid) {\n        this.hid = hid;\n    }\n    resetTarget() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.cmdNums(10 /* DAP_RESET_TARGET */, []);\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.cmdNums(3 /* DAP_DISCONNECT */, []);\n        });\n    }\n    cmdNums(op, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            data.unshift(op);\n            const buf = yield this.send(data);\n            if (buf[0] !== op) {\n                throw new Error(`Bad response for ${op} -> ${buf[0]}`);\n            }\n            switch (op) {\n                case 2 /* DAP_CONNECT */:\n                case 0 /* DAP_INFO */:\n                case 5 /* DAP_TRANSFER */:\n                case 6 /* DAP_TRANSFER_BLOCK */:\n                    break;\n                default:\n                    if (buf[1] !== 0) {\n                        throw new Error(`Bad status for ${op} -> ${buf[1]}`);\n                    }\n            }\n            return buf;\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const v = yield this.info(254 /* PACKET_COUNT */);\n            if (v) {\n                // this.maxSent = v as number;\n            }\n            else {\n                throw new Error(\"DAP_INFO returned invalid packet count.\");\n            }\n            yield this.cmdNums(17 /* DAP_SWJ_CLOCK */, util_1.addInt32(null, 10000000));\n            const buf = yield this.cmdNums(2 /* DAP_CONNECT */, [0]);\n            if (buf[1] !== 1) {\n                throw new Error(\"SWD mode not enabled.\");\n            }\n            yield this.cmdNums(17 /* DAP_SWJ_CLOCK */, util_1.addInt32(null, 10000000));\n            yield this.cmdNums(4 /* DAP_TRANSFER_CONFIGURE */, [0, 0x50, 0, 0, 0]);\n            yield this.cmdNums(19 /* DAP_SWD_CONFIGURE */, [0]);\n            yield this.jtagToSwd();\n        });\n    }\n    jtagToSwd() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const arrs = [\n                [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n                [16, 0x9e, 0xe7],\n                [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n                [8, 0x00],\n            ];\n            for (const arr of arrs) {\n                yield this.swjSequence(arr);\n            }\n        });\n    }\n    swjSequence(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.cmdNums(18 /* DAP_SWJ_SEQUENCE */, data);\n        });\n    }\n    info(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const buf = yield this.cmdNums(0 /* DAP_INFO */, [id]);\n            if (buf[1] === 0) {\n                return null;\n            }\n            switch (id) {\n                case 240 /* CAPABILITIES */:\n                case 254 /* PACKET_COUNT */:\n                case 255 /* PACKET_SIZE */:\n                    if (buf[1] === 1) {\n                        return buf[2];\n                    }\n                    else if (buf[1] === 2) {\n                        return buf[3] << 8 | buf[2];\n                    }\n            }\n            return buf.subarray(2, buf[1] + 2 - 1); // .toString(\"utf8\")\n        });\n    }\n    send(command) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const array = Uint8Array.from(command);\n            yield this.hid.write(array.buffer);\n            const response = yield this.hid.read();\n            return new Uint8Array(response.buffer);\n        });\n    }\n}\nexports.CMSISDAP = CMSISDAP;\n\n\n\n},{\"../util\":17}],16:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction bufferExtend(source, length) {\n    const sarr = new Uint8Array(source);\n    const dest = new ArrayBuffer(length);\n    const darr = new Uint8Array(dest);\n    for (let i = 0; i < Math.min(source.byteLength, length); i++) {\n        darr[i] = sarr[i];\n    }\n    return dest;\n}\nclass HID {\n    constructor(device) {\n        this.packetSize = 64;\n        this.controlTransferGetReport = 0x01;\n        this.controlTransferSetReport = 0x09;\n        this.controlTransferOutReport = 0x200;\n        this.controlTransferInReport = 0x100;\n        this.device = device;\n    }\n    open(hidInterfaceClass = 0xFF, useControlTransfer = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.useControlTransfer = useControlTransfer;\n            yield this.device.open();\n            yield this.device.selectConfiguration(1);\n            const hids = this.device.configuration.interfaces.filter(intf => intf.alternates[0].interfaceClass === hidInterfaceClass);\n            if (hids.length === 0) {\n                throw new Error(\"No HID interfaces found.\");\n            }\n            this.interfaces = hids;\n            if (this.interfaces.length === 1) {\n                this.interface = this.interfaces[0];\n            }\n            yield this.device.claimInterface(this.interface.interfaceNumber);\n            this.endpoints = this.interface.alternates[0].endpoints;\n            this.epIn = null;\n            this.epOut = null;\n            for (const endpoint of this.endpoints) {\n                if (endpoint.direction === \"in\") {\n                    this.epIn = endpoint;\n                }\n                else {\n                    this.epOut = endpoint;\n                }\n            }\n        });\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.device.close();\n        });\n    }\n    write(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.epOut && !this.useControlTransfer) {\n                const reportSize = this.epOut.packetSize;\n                const buffer = bufferExtend(data, reportSize);\n                return this.device.transferOut(this.epOut.endpointNumber, buffer);\n            }\n            else {\n                // Device does not have out endpoint. Send data using control transfer\n                const buffer = bufferExtend(data, this.packetSize);\n                return this.device.controlTransferOut({\n                    requestType: \"class\",\n                    recipient: \"interface\",\n                    request: this.controlTransferSetReport,\n                    value: this.controlTransferOutReport,\n                    index: this.interface.interfaceNumber\n                }, buffer);\n            }\n        });\n    }\n    read() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.epIn && !this.useControlTransfer) {\n                const reportSize = this.epIn.packetSize;\n                return this.device.transferIn(this.epIn.endpointNumber, reportSize)\n                    .then(res => res.data);\n            }\n            else {\n                return this.device.controlTransferIn({\n                    requestType: \"class\",\n                    recipient: \"interface\",\n                    request: this.controlTransferGetReport,\n                    value: this.controlTransferInReport,\n                    index: this.interface.interfaceNumber\n                }, this.packetSize).then(res => res.data);\n            }\n        });\n    }\n}\nexports.HID = HID;\n\n\n\n},{}],17:[function(require,module,exports){\n(function (Buffer){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readUInt32LE = (b, idx) => {\n    return (b[idx] |\n        (b[idx + 1] << 8) |\n        (b[idx + 2] << 16) |\n        (b[idx + 3] << 24)) >>> 0;\n};\nexports.bufferConcat = (bufs) => {\n    let len = 0;\n    for (const b of bufs) {\n        len += b.length;\n    }\n    const r = new Uint8Array(len);\n    len = 0;\n    for (const b of bufs) {\n        r.set(b, len);\n        len += b.length;\n    }\n    return r;\n};\nexports.delay = (t) => __awaiter(this, void 0, void 0, function* () {\n    return new Promise(resolve => {\n        setTimeout(resolve, t);\n    });\n});\nexports.addInt32 = (arr, val) => {\n    if (!arr) {\n        arr = [];\n    }\n    arr.push(val & 0xff, (val >> 8) & 0xff, (val >> 16) & 0xff, (val >> 24) & 0xff);\n    return arr;\n};\nexports.hex = (v) => {\n    return \"0x\" + v.toString(16);\n};\nexports.rid = (v) => {\n    const m = [\n        \"DP_0x0\",\n        \"DP_0x4\",\n        \"DP_0x8\",\n        \"DP_0xC\",\n        \"AP_0x0\",\n        \"AP_0x4\",\n        \"AP_0x8\",\n        \"AP_0xC\",\n    ];\n    return m[v] || \"?\";\n};\nexports.bank = (addr) => {\n    const APBANKSEL = 0x000000f0;\n    return (addr & APBANKSEL) | (addr & 0xff000000);\n};\nexports.apReg = (r, mode) => {\n    const v = r | mode | 1 /* AP_ACC */;\n    return (4 + ((v & 0x0c) >> 2));\n};\nexports.bufToUint32Array = (buf) => {\n    exports.assert((buf.length & 3) === 0);\n    const r = [];\n    if (!buf.length) {\n        return r;\n    }\n    r[buf.length / 4 - 1] = 0;\n    for (let i = 0; i < r.length; ++i) {\n        r[i] = exports.readUInt32LE(buf, i << 2);\n    }\n    return r;\n};\nexports.assert = (cond) => {\n    if (!cond) {\n        throw new Error(\"assertion failed\");\n    }\n};\nexports.regRequest = (regId, isWrite = false) => {\n    let request = !isWrite ? 2 /* READ */ : 0 /* WRITE */;\n    if (regId < 4) {\n        request |= 0 /* DP_ACC */;\n    }\n    else {\n        request |= 1 /* AP_ACC */;\n    }\n    request |= (regId & 3) << 2;\n    return request;\n};\nexports.hexBytes = (bytes) => {\n    let chk = 0;\n    let r = \":\";\n    bytes.forEach(b => chk += b);\n    bytes.push((-chk) & 0xff);\n    bytes.forEach(b => r += (\"0\" + b.toString(16)).slice(-2));\n    return r.toUpperCase();\n};\nexports.isBufferBinary = (buffer) => {\n    // detect if buffer contains text or binary data\n    const lengthToCheck = buffer.byteLength > 50 ? 50 : buffer.byteLength;\n    const bufferString = Buffer.from(buffer).toString(\"utf8\");\n    for (let i = 0; i < lengthToCheck; i++) {\n        const charCode = bufferString.charCodeAt(i);\n        // 65533 is a code for unknown character\n        // 0-8 are codes for control characters\n        if (charCode === 65533 || charCode <= 8) {\n            return true;\n        }\n    }\n    return false;\n};\n\n\n\n}).call(this,require(\"buffer\").Buffer)\n},{\"buffer\":20}],18:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cortex_1 = require(\"./cortex/cortex\");\nexports.CortexM = cortex_1.CortexM;\nvar constants_1 = require(\"./cortex/constants\");\nexports.CoreNames = constants_1.CoreNames;\nexports.ISANames = constants_1.ISANames;\nvar dap_1 = require(\"./dap/dap\");\nexports.DAP = dap_1.DAP;\nvar FlashTarget_1 = require(\"./targets/FlashTarget\");\nexports.FlashTargets = FlashTarget_1.FlashTargets;\nexports.FlashTarget = FlashTarget_1.FlashTarget;\nvar FlashProgram_1 = require(\"./targets/FlashProgram\");\nexports.FlashProgram = FlashProgram_1.FlashProgram;\nvar PlatformSelector_1 = require(\"./targets/PlatformSelector\");\nexports.PlatformSelector = PlatformSelector_1.PlatformSelector;\nvar hid_1 = require(\"./transport/hid\");\nexports.HID = hid_1.HID;\n\n\n\n},{\"./cortex/constants\":1,\"./cortex/cortex\":2,\"./dap/dap\":4,\"./targets/FlashProgram\":10,\"./targets/FlashTarget\":11,\"./targets/PlatformSelector\":14,\"./transport/hid\":16}],19:[function(require,module,exports){\n'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n},{}],20:[function(require,module,exports){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (ArrayBuffer.isView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (ArrayBuffer.isView(buf)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n},{\"base64-js\":19,\"ieee754\":21}],21:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],22:[function(require,module,exports){\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.MemoryMap = factory());\n}(this, (function () { 'use strict';\n\n/**\n * Parser/writer for the \"Intel hex\" format.\n */\n\n/*\n * A regexp that matches lines in a .hex file.\n *\n * One hexadecimal character is matched by \"[0-9A-Fa-f]\".\n * Two hex characters are matched by \"[0-9A-Fa-f]{2}\"\n * Eight or more hex characters are matched by \"[0-9A-Fa-f]{8,}\"\n * A capture group of two hex characters is \"([0-9A-Fa-f]{2})\"\n *\n * Record mark         :\n * 8 or more hex chars  ([0-9A-Fa-f]{8,})\n * Checksum                              ([0-9A-Fa-f]{2})\n * Optional newline                                      (?:\\r\\n|\\r|\\n|)\n */\nvar hexLineRegexp = /:([0-9A-Fa-f]{8,})([0-9A-Fa-f]{2})(?:\\r\\n|\\r|\\n|)/g;\n\n\n// Takes a Uint8Array as input,\n// Returns an integer in the 0-255 range.\nfunction checksum(bytes) {\n    return (-bytes.reduce(function (sum, v){ return sum + v; }, 0)) & 0xFF;\n}\n\n// Takes two Uint8Arrays as input,\n// Returns an integer in the 0-255 range.\nfunction checksumTwo(array1, array2) {\n    var partial1 = array1.reduce(function (sum, v){ return sum + v; }, 0);\n    var partial2 = array2.reduce(function (sum, v){ return sum + v; }, 0);\n    return -( partial1 + partial2 ) & 0xFF;\n}\n\n\n// Trivial utility. Converts a number to hex and pads with zeroes up to 2 characters.\nfunction hexpad(number) {\n    return number.toString(16).toUpperCase().padStart(2, '0');\n}\n\n\n// Polyfill as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\nNumber.isInteger = Number.isInteger || function(value) {\n    return typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value;\n};\n\n\n/**\n * @class MemoryMap\n *\n * Represents the contents of a memory layout, with main focus into (possibly sparse) blocks of data.\n *<br/>\n * A {@linkcode MemoryMap} acts as a subclass of\n * {@linkcode https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map|Map}.\n * In every entry of it, the key is the starting address of a data block (an integer number),\n * and the value is the <tt>Uint8Array</tt> with the data for that block.\n *<br/>\n * The main rationale for this is that a .hex file can contain a single block of contiguous\n * data starting at memory address 0 (and it's the common case for simple .hex files),\n * but complex files with several non-contiguous data blocks are also possible, thus\n * the need for a data structure on top of the <tt>Uint8Array</tt>s.\n *<br/>\n * In order to parse <tt>.hex</tt> files, use the {@linkcode MemoryMap.fromHex} <em>static</em> factory\n * method. In order to write <tt>.hex</tt> files, create a new {@linkcode MemoryMap} and call\n * its {@linkcode MemoryMap.asHexString} method.\n *\n * @extends Map\n * @example\n * import MemoryMap from 'nrf-intel-hex';\n *\n * let memMap1 = new MemoryMap();\n * let memMap2 = new MemoryMap([[0, new Uint8Array(1,2,3,4)]]);\n * let memMap3 = new MemoryMap({0: new Uint8Array(1,2,3,4)});\n * let memMap4 = new MemoryMap({0xCF0: new Uint8Array(1,2,3,4)});\n */\nvar MemoryMap = function MemoryMap(blocks) {\n    var this$1 = this;\n\n    this._blocks = new Map();\n\n    if (blocks && typeof blocks[Symbol.iterator] === 'function') {\n        for (var tuple of blocks) {\n            if (!(tuple instanceof Array) || tuple.length !== 2) {\n                throw new Error('First parameter to MemoryMap constructor must be an iterable of [addr, bytes] or undefined');\n            }\n            this$1.set(tuple[0], tuple[1]);\n        }\n    } else if (typeof blocks === 'object') {\n        // Try iterating through the object's keys\n        var addrs = Object.keys(blocks);\n        for (var addr of addrs) {\n            this$1.set(parseInt(addr), blocks[addr]);\n        }\n\n    } else if (blocks !== undefined && blocks !== null) {\n        throw new Error('First parameter to MemoryMap constructor must be an iterable of [addr, bytes] or undefined');\n    }\n};\n\nvar prototypeAccessors = { size: { configurable: true } };\n\nMemoryMap.prototype.set = function set (addr, value) {\n    if (!Number.isInteger(addr)) {\n        throw new Error('Address passed to MemoryMap is not an integer');\n    }\n    if (addr < 0) {\n        throw new Error('Address passed to MemoryMap is negative');\n    }\n    if (!(value instanceof Uint8Array)) {\n        throw new Error('Bytes passed to MemoryMap are not an Uint8Array');\n    }\n    return this._blocks.set(addr, value);\n};\n// Delegate the following to the 'this._blocks' Map:\nMemoryMap.prototype.get = function get (addr){ return this._blocks.get(addr);};\nMemoryMap.prototype.clear = function clear ()  { return this._blocks.clear();  };\nMemoryMap.prototype.delete = function delete$1 (addr) { return this._blocks.delete(addr); };\nMemoryMap.prototype.entries = function entries (){ return this._blocks.entries();};\nMemoryMap.prototype.forEach = function forEach (callback, that) { return this._blocks.forEach(callback, that); };\nMemoryMap.prototype.has = function has (addr){ return this._blocks.has(addr);};\nMemoryMap.prototype.keys = function keys ()   { return this._blocks.keys();   };\nMemoryMap.prototype.values = function values () { return this._blocks.values(); };\nprototypeAccessors.size.get = function ()   { return this._blocks.size;     };\nMemoryMap.prototype[Symbol.iterator] = function () { return this._blocks[Symbol.iterator](); };\n\n\n/**\n * Parses a string containing data formatted in \"Intel HEX\" format, and\n * returns an instance of {@linkcode MemoryMap}.\n *<br/>\n * The insertion order of keys in the {@linkcode MemoryMap} is guaranteed to be strictly\n * ascending. In other words, when iterating through the {@linkcode MemoryMap}, the addresses\n * will be ordered in ascending order.\n *<br/>\n * The parser has an opinionated behaviour, and will throw a descriptive error if it\n * encounters some malformed input. Check the project's\n * {@link https://github.com/NordicSemiconductor/nrf-intel-hex#Features|README file} for details.\n *<br/>\n * If <tt>maxBlockSize</tt> is given, any contiguous data block larger than that will\n * be split in several blocks.\n *\n * @param {String} hexText The contents of a .hex file.\n * @param {Number} [maxBlockSize=Infinity] Maximum size of the returned <tt>Uint8Array</tt>s.\n *\n * @return {MemoryMap}\n *\n * @example\n * import MemoryMap from 'nrf-intel-hex';\n *\n * let intelHexString =\n * \":100000000102030405060708090A0B0C0D0E0F1068\\n\" +\n * \":00000001FF\";\n *\n * let memMap = MemoryMap.fromHex(intelHexString);\n *\n * for (let [address, dataBlock] of memMap) {\n * console.log('Data block at ', address, ', bytes: ', dataBlock);\n * }\n */\nMemoryMap.fromHex = function fromHex (hexText, maxBlockSize) {\n        if ( maxBlockSize === void 0 ) maxBlockSize = Infinity;\n\n    var blocks = new MemoryMap();\n\n    var lastCharacterParsed = 0;\n    var matchResult;\n    var recordCount = 0;\n\n    // Upper Linear Base Address, the 16 most significant bits (2 bytes) of\n    // the current 32-bit (4-byte) address\n    // In practice this is a offset that is summed to the \"load offset\" of the\n    // data records\n    var ulba = 0;\n\n    hexLineRegexp.lastIndex = 0; // Reset the regexp, if not it would skip content when called twice\n\n    while ((matchResult = hexLineRegexp.exec(hexText)) !== null) {\n        recordCount++;\n\n        // By default, a regexp loop ignores gaps between matches, but\n        // we want to be aware of them.\n        if (lastCharacterParsed !== matchResult.index) {\n            throw new Error(\n                'Malformed hex file: Could not parse between characters ' +\n                lastCharacterParsed +\n                ' and ' +\n                matchResult.index +\n                ' (\"' +\n                hexText.substring(lastCharacterParsed, Math.min(matchResult.index, lastCharacterParsed + 16)).trim() +\n                '\")');\n        }\n        lastCharacterParsed = hexLineRegexp.lastIndex;\n\n        // Give pretty names to the match's capture groups\n        var recordStr = matchResult[1];\n            var recordChecksum = matchResult[2];\n\n        // String to Uint8Array - https://stackoverflow.com/questions/43131242/how-to-convert-a-hexademical-string-of-data-to-an-arraybuffer-in-javascript\n        var recordBytes = new Uint8Array(recordStr.match(/[\\da-f]{2}/gi).map(function (h){ return parseInt(h, 16); }));\n\n        var recordLength = recordBytes[0];\n        if (recordLength + 4 !== recordBytes.length) {\n            throw new Error('Mismatched record length at record ' + recordCount + ' (' + matchResult[0].trim() + '), expected ' + (recordLength) + ' data bytes but actual length is ' + (recordBytes.length - 4));\n        }\n\n        var cs = checksum(recordBytes);\n        if (parseInt(recordChecksum, 16) !== cs) {\n            throw new Error('Checksum failed at record ' + recordCount + ' (' + matchResult[0].trim() + '), should be ' + cs.toString(16) );\n        }\n\n        var offset = (recordBytes[1] << 8) + recordBytes[2];\n        var recordType = recordBytes[3];\n        var data = recordBytes.subarray(4);\n\n        if (recordType === 0) {\n            // Data record, contains data\n            // Create a new block, at (upper linear base address + offset)\n            if (blocks.has(ulba + offset)) {\n                throw new Error('Duplicated data at record ' + recordCount + ' (' + matchResult[0].trim() + ')');\n            }\n            if (offset + data.length > 0x10000) {\n                throw new Error(\n                    'Data at record ' +\n                    recordCount +\n                    ' (' +\n                    matchResult[0].trim() +\n                    ') wraps over 0xFFFF. This would trigger ambiguous behaviour. Please restructure your data so that for every record the data offset plus the data length do not exceed 0xFFFF.');\n            }\n\n            blocks.set( ulba + offset, data );\n\n        } else {\n\n            // All non-data records must have a data offset of zero\n            if (offset !== 0) {\n                throw new Error('Record ' + recordCount + ' (' + matchResult[0].trim() + ') must have 0000 as data offset.');\n            }\n\n            switch (recordType) {\n            case 1: // EOF\n                if (lastCharacterParsed !== hexText.length) {\n                    // This record should be at the very end of the string\n                    throw new Error('There is data after an EOF record at record ' + recordCount);\n                }\n\n                return blocks.join(maxBlockSize);\n\n            case 2: // Extended Segment Address Record\n                // Sets the 16 most significant bits of the 20-bit Segment Base\n                // Address for the subsequent data.\n                ulba = ((data[0] << 8) + data[1]) << 4;\n                break;\n\n            case 3: // Start Segment Address Record\n                // Do nothing. Record type 3 only applies to 16-bit Intel CPUs,\n                // where it should reset the program counter (CS+IP CPU registers)\n                break;\n\n            case 4: // Extended Linear Address Record\n                // Sets the 16 most significant (upper) bits of the 32-bit Linear Address\n                // for the subsequent data\n                ulba = ((data[0] << 8) + data[1]) << 16;\n                break;\n\n            case 5: // Start Linear Address Record\n                // Do nothing. Record type 5 only applies to 32-bit Intel CPUs,\n                // where it should reset the program counter (EIP CPU register)\n                // It might have meaning for other CPU architectures\n                // (see http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka9903.html )\n                // but will be ignored nonetheless.\n                break;\n            default:\n                throw new Error('Invalid record type 0x' + hexpad(recordType) + ' at record ' + recordCount + ' (should be between 0x00 and 0x05)');\n            }\n        }\n    }\n\n    if (recordCount) {\n        throw new Error('No EOF record at end of file');\n    } else {\n        throw new Error('Malformed .hex file, could not parse any registers');\n    }\n};\n\n\n/**\n * Returns a <strong>new</strong> instance of {@linkcode MemoryMap}, containing\n * the same data, but concatenating together those memory blocks that are adjacent.\n *<br/>\n * The insertion order of keys in the {@linkcode MemoryMap} is guaranteed to be strictly\n * ascending. In other words, when iterating through the {@linkcode MemoryMap}, the addresses\n * will be ordered in ascending order.\n *<br/>\n * If <tt>maxBlockSize</tt> is given, blocks will be concatenated together only\n * until the joined block reaches this size in bytes. This means that the output\n * {@linkcode MemoryMap} might have more entries than the input one.\n *<br/>\n * If there is any overlap between blocks, an error will be thrown.\n *<br/>\n * The returned {@linkcode MemoryMap} will use newly allocated memory.\n *\n * @param {Number} [maxBlockSize=Infinity] Maximum size of the <tt>Uint8Array</tt>s in the\n * returned {@linkcode MemoryMap}.\n *\n * @return {MemoryMap}\n */\nMemoryMap.prototype.join = function join (maxBlockSize) {\n        var this$1 = this;\n        if ( maxBlockSize === void 0 ) maxBlockSize = Infinity;\n\n\n    // First pass, create a Map of address→length of contiguous blocks\n    var sortedKeys = Array.from(this.keys()).sort(function (a,b){ return a-b; });\n    var blockSizes = new Map();\n    var lastBlockAddr = -1;\n    var lastBlockEndAddr = -1;\n\n    for (var i=0,l=sortedKeys.length; i<l; i++) {\n        var blockAddr = sortedKeys[i];\n        var blockLength = this$1.get(sortedKeys[i]).length;\n\n        if (lastBlockEndAddr === blockAddr && (lastBlockEndAddr - lastBlockAddr) < maxBlockSize) {\n            // Grow when the previous end address equals the current,\n            // and we don't go over the maximum block size.\n            blockSizes.set(lastBlockAddr, blockSizes.get(lastBlockAddr) + blockLength);\n            lastBlockEndAddr += blockLength;\n        } else if (lastBlockEndAddr <= blockAddr) {\n            // Else mark a new block.\n            blockSizes.set(blockAddr, blockLength);\n            lastBlockAddr = blockAddr;\n            lastBlockEndAddr = blockAddr + blockLength;\n        } else {\n            throw new Error('Overlapping data around address 0x' + blockAddr.toString(16));\n        }\n    }\n\n    // Second pass: allocate memory for the contiguous blocks and copy data around.\n    var mergedBlocks = new MemoryMap();\n    var mergingBlock;\n    var mergingBlockAddr = -1;\n    for (var i$1=0,l$1=sortedKeys.length; i$1<l$1; i$1++) {\n        var blockAddr$1 = sortedKeys[i$1];\n        if (blockSizes.has(blockAddr$1)) {\n            mergingBlock = new Uint8Array(blockSizes.get(blockAddr$1));\n            mergedBlocks.set(blockAddr$1, mergingBlock);\n            mergingBlockAddr = blockAddr$1;\n        }\n        mergingBlock.set(this$1.get(blockAddr$1), blockAddr$1 - mergingBlockAddr);\n    }\n\n    return mergedBlocks;\n};\n\n/**\n * Given a {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map|<tt>Map</tt>}\n * of {@linkcode MemoryMap}s, indexed by a alphanumeric ID,\n * returns a <tt>Map</tt> of address to tuples (<tt>Arrays</tt>s of length 2) of the form\n * <tt>(id, Uint8Array)</tt>s.\n *<br/>\n * The scenario for using this is having several {@linkcode MemoryMap}s, from several calls to\n * {@link module:nrf-intel-hex~hexToArrays|hexToArrays}, each having a different identifier.\n * This function locates where those memory block sets overlap, and returns a <tt>Map</tt>\n * containing addresses as keys, and arrays as values. Each array will contain 1 or more\n * <tt>(id, Uint8Array)</tt> tuples: the identifier of the memory block set that has\n * data in that region, and the data itself. When memory block sets overlap, there will\n * be more than one tuple.\n *<br/>\n * The <tt>Uint8Array</tt>s in the output are\n * {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray|subarrays}\n * of the input data; new memory is <strong>not</strong> allocated for them.\n *<br/>\n * The insertion order of keys in the output <tt>Map</tt> is guaranteed to be strictly\n * ascending. In other words, when iterating through the <tt>Map</tt>, the addresses\n * will be ordered in ascending order.\n *<br/>\n * When two blocks overlap, the corresponding array of tuples will have the tuples ordered\n * in the insertion order of the input <tt>Map</tt> of block sets.\n *<br/>\n *\n * @param {Map.MemoryMap} memoryMaps The input memory block sets\n *\n * @example\n * import MemoryMap from 'nrf-intel-hex';\n *\n * let memMap1 = MemoryMap.fromHex( hexdata1 );\n * let memMap2 = MemoryMap.fromHex( hexdata2 );\n * let memMap3 = MemoryMap.fromHex( hexdata3 );\n *\n * let maps = new Map([\n *  ['file A', blocks1],\n *  ['file B', blocks2],\n *  ['file C', blocks3]\n * ]);\n *\n * let overlappings = MemoryMap.overlapMemoryMaps(maps);\n *\n * for (let [address, tuples] of overlappings) {\n * // if 'tuples' has length > 1, there is an overlap starting at 'address'\n *\n * for (let [address, tuples] of overlappings) {\n *     let [id, bytes] = tuple;\n *     // 'id' in this example is either 'file A', 'file B' or 'file C'\n * }\n * }\n * @return {Map.Array<mixed,Uint8Array>} The map of possibly overlapping memory blocks\n */\nMemoryMap.overlapMemoryMaps = function overlapMemoryMaps (memoryMaps) {\n    // First pass: create a list of addresses where any block starts or ends.\n    var cuts = new Set();\n    for (var [, blocks] of memoryMaps) {\n        for (var [address, block] of blocks) {\n            cuts.add(address);\n            cuts.add(address + block.length);\n        }\n    }\n\n    var orderedCuts = Array.from(cuts.values()).sort(function (a,b){ return a-b; });\n    var overlaps = new Map();\n\n    // Second pass: iterate through the cuts, get slices of every intersecting blockset\n    var loop = function ( i, l ) {\n        var cut = orderedCuts[i];\n        var nextCut = orderedCuts[i+1];\n        var tuples = [];\n\n        for (var [setId, blocks$1] of memoryMaps) {\n            // Find the block with the highest address that is equal or lower to\n            // the current cut (if any)\n            var blockAddr = Array.from(blocks$1.keys()).reduce(function (acc, val){\n                if (val > cut) {\n                    return acc;\n                }\n                return Math.max( acc, val );\n            }, -1);\n\n            if (blockAddr !== -1) {\n                var block$1 = blocks$1.get(blockAddr);\n                var subBlockStart = cut - blockAddr;\n                var subBlockEnd = nextCut - blockAddr;\n\n                if (subBlockStart < block$1.length) {\n                    tuples.push([ setId, block$1.subarray(subBlockStart, subBlockEnd) ]);\n                }\n            }\n        }\n\n        if (tuples.length) {\n            overlaps.set(cut, tuples);\n        }\n    };\n\n        for (var i=0, l=orderedCuts.length-1; i<l; i++) loop( i, l );\n\n    return overlaps;\n};\n\n\n/**\n * Given the output of the {@linkcode MemoryMap.overlapMemoryMaps|overlapMemoryMaps}\n * (a <tt>Map</tt> of address to an <tt>Array</tt> of <tt>(id, Uint8Array)</tt> tuples),\n * returns a {@linkcode MemoryMap}. This discards the IDs in the process.\n *<br/>\n * The output <tt>Map</tt> contains as many entries as the input one (using the same addresses\n * as keys), but the value for each entry will be the <tt>Uint8Array</tt> of the <b>last</b>\n * tuple for each address in the input data.\n *<br/>\n * The scenario is wanting to join together several parsed .hex files, not worrying about\n * their overlaps.\n *<br/>\n *\n * @param {Map.Array<mixed,Uint8Array>} overlaps The (possibly overlapping) input memory blocks\n * @return {MemoryMap} The flattened memory blocks\n */\nMemoryMap.flattenOverlaps = function flattenOverlaps (overlaps) {\n    return new MemoryMap(\n        Array.from(overlaps.entries()).map(function (ref) {\n                var address = ref[0];\n                var tuples = ref[1];\n\n            return [address, tuples[tuples.length - 1][1] ];\n        })\n    );\n};\n\n\n/**\n * Returns a new instance of {@linkcode MemoryMap}, where:\n *\n * <ul>\n *  <li>Each key (the start address of each <tt>Uint8Array</tt>) is a multiple of\n *<tt>pageSize</tt></li>\n *  <li>The size of each <tt>Uint8Array</tt> is exactly <tt>pageSize</tt></li>\n *  <li>Bytes from the input map to bytes in the output</li>\n *  <li>Bytes not in the input are replaced by a padding value</li>\n * </ul>\n *<br/>\n * The scenario is wanting to prepare pages of bytes for a write operation, where the write\n * operation affects a whole page/sector at once.\n *<br/>\n * The insertion order of keys in the output {@linkcode MemoryMap} is guaranteed\n * to be strictly ascending. In other words, when iterating through the\n * {@linkcode MemoryMap}, the addresses will be ordered in ascending order.\n *<br/>\n * The <tt>Uint8Array</tt>s in the output will be newly allocated.\n *<br/>\n *\n * @param {Number} [pageSize=1024] The size of the output pages, in bytes\n * @param {Number} [pad=0xFF] The byte value to use for padding\n * @return {MemoryMap}\n */\nMemoryMap.prototype.paginate = function paginate ( pageSize, pad) {\n        var this$1 = this;\n        if ( pageSize === void 0 ) pageSize=1024;\n        if ( pad === void 0 ) pad=0xFF;\n\n    if (pageSize <= 0) {\n        throw new Error('Page size must be greater than zero');\n    }\n    var outPages = new MemoryMap();\n    var page;\n\n    var sortedKeys = Array.from(this.keys()).sort(function (a,b){ return a-b; });\n\n    for (var i=0,l=sortedKeys.length; i<l; i++) {\n        var blockAddr = sortedKeys[i];\n        var block = this$1.get(blockAddr);\n        var blockLength = block.length;\n        var blockEnd = blockAddr + blockLength;\n\n        for (var pageAddr = blockAddr - (blockAddr % pageSize); pageAddr < blockEnd; pageAddr += pageSize) {\n            page = outPages.get(pageAddr);\n            if (!page) {\n                page = new Uint8Array(pageSize);\n                page.fill(pad);\n                outPages.set(pageAddr, page);\n            }\n\n            var offset = pageAddr - blockAddr;\n            var subBlock = (void 0);\n            if (offset <= 0) {\n                // First page which intersects the block\n                subBlock = block.subarray(0, Math.min(pageSize + offset, blockLength));\n                page.set(subBlock, -offset);\n            } else {\n                // Any other page which intersects the block\n                subBlock = block.subarray(offset, offset + Math.min(pageSize, blockLength - offset));\n                page.set(subBlock, 0);\n            }\n        }\n    }\n\n    return outPages;\n};\n\n\n/**\n * Locates the <tt>Uint8Array</tt> which contains the given offset,\n * and returns the four bytes held at that offset, as a 32-bit unsigned integer.\n *\n *<br/>\n * Behaviour is similar to {@linkcode https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32|DataView.prototype.getUint32},\n * except that this operates over a {@linkcode MemoryMap} instead of\n * over an <tt>ArrayBuffer</tt>, and that this may return <tt>undefined</tt> if\n * the address is not <em>entirely</em> contained within one of the <tt>Uint8Array</tt>s.\n *<br/>\n *\n * @param {Number} offset The memory offset to read the data\n * @param {Boolean} [littleEndian=false] Whether to fetch the 4 bytes as a little- or big-endian integer\n * @return {Number|undefined} An unsigned 32-bit integer number\n */\nMemoryMap.prototype.getUint32 = function getUint32 (offset, littleEndian) {\n        var this$1 = this;\n\n    var keys = Array.from(this.keys());\n\n    for (var i=0,l=keys.length; i<l; i++) {\n        var blockAddr = keys[i];\n        var block = this$1.get(blockAddr);\n        var blockLength = block.length;\n        var blockEnd = blockAddr + blockLength;\n\n        if (blockAddr <= offset && (offset+4) <= blockEnd) {\n            return (new DataView(block.buffer, offset - blockAddr, 4)).getUint32(0, littleEndian);\n        }\n    }\n    return;\n};\n\n\n/**\n * Returns a <tt>String</tt> of text representing a .hex file.\n * <br/>\n * The writer has an opinionated behaviour. Check the project's\n * {@link https://github.com/NordicSemiconductor/nrf-intel-hex#Features|README file} for details.\n *\n * @param {Number} [lineSize=16] Maximum number of bytes to be encoded in each data record.\n * Must have a value between 1 and 255, as per the specification.\n *\n * @return {String} String of text with the .hex representation of the input binary data\n *\n * @example\n * import MemoryMap from 'nrf-intel-hex';\n *\n * let memMap = new MemoryMap();\n * let bytes = new Uint8Array(....);\n * memMap.set(0x0FF80000, bytes); // The block with 'bytes' will start at offset 0x0FF80000\n *\n * let string = memMap.asHexString();\n */\nMemoryMap.prototype.asHexString = function asHexString (lineSize) {\n        var this$1 = this;\n        if ( lineSize === void 0 ) lineSize = 16;\n\n    var lowAddress  = 0;// 16 least significant bits of the current addr\n    var highAddress = -1 << 16; // 16 most significant bits of the current addr\n    var records = [];\n    if (lineSize <=0) {\n        throw new Error('Size of record must be greater than zero');\n    } else if (lineSize > 255) {\n        throw new Error('Size of record must be less than 256');\n    }\n\n    // Placeholders\n    var offsetRecord = new Uint8Array(6);\n    var recordHeader = new Uint8Array(4);\n\n    var sortedKeys = Array.from(this.keys()).sort(function (a,b){ return a-b; });\n    for (var i=0,l=sortedKeys.length; i<l; i++) {\n        var blockAddr = sortedKeys[i];\n        var block = this$1.get(blockAddr);\n\n        // Sanity checks\n        if (!(block instanceof Uint8Array)) {\n            throw new Error('Block at offset ' + blockAddr + ' is not an Uint8Array');\n        }\n        if (blockAddr < 0) {\n            throw new Error('Block at offset ' + blockAddr + ' has a negative thus invalid address');\n        }\n        var blockSize = block.length;\n        if (!blockSize) { continue; }   // Skip zero-length blocks\n\n\n        if (blockAddr > (highAddress + 0xFFFF)) {\n            // Insert a new 0x04 record to jump to a new 64KiB block\n\n            // Round up the least significant 16 bits - no bitmasks because they trigger\n            // base-2 negative numbers, whereas subtracting the modulo maintains precision\n            highAddress = blockAddr - blockAddr % 0x10000;\n            lowAddress = 0;\n\n            offsetRecord[0] = 2;// Length\n            offsetRecord[1] = 0;// Load offset, high byte\n            offsetRecord[2] = 0;// Load offset, low byte\n            offsetRecord[3] = 4;// Record type\n            offsetRecord[4] = highAddress >> 24;// new address offset, high byte\n            offsetRecord[5] = highAddress >> 16;// new address offset, low byte\n\n            records.push(\n                ':' +\n                Array.prototype.map.call(offsetRecord, hexpad).join('') +\n                hexpad(checksum(offsetRecord))\n            );\n        }\n\n        if (blockAddr < (highAddress + lowAddress)) {\n            throw new Error(\n                'Block starting at 0x' +\n                blockAddr.toString(16) +\n                ' overlaps with a previous block.');\n        }\n\n        lowAddress = blockAddr % 0x10000;\n        var blockOffset = 0;\n        var blockEnd = blockAddr + blockSize;\n        if (blockEnd > 0xFFFFFFFF) {\n            throw new Error('Data cannot be over 0xFFFFFFFF');\n        }\n\n        // Loop for every 64KiB memory segment that spans this block\n        while (highAddress + lowAddress < blockEnd) {\n\n            if (lowAddress > 0xFFFF) {\n                // Insert a new 0x04 record to jump to a new 64KiB block\n                highAddress += 1 << 16; // Increase by one\n                lowAddress = 0;\n\n                offsetRecord[0] = 2;// Length\n                offsetRecord[1] = 0;// Load offset, high byte\n                offsetRecord[2] = 0;// Load offset, low byte\n                offsetRecord[3] = 4;// Record type\n                offsetRecord[4] = highAddress >> 24;// new address offset, high byte\n                offsetRecord[5] = highAddress >> 16;// new address offset, low byte\n\n                records.push(\n                    ':' +\n                    Array.prototype.map.call(offsetRecord, hexpad).join('') +\n                    hexpad(checksum(offsetRecord))\n                );\n            }\n\n            var recordSize = -1;\n            // Loop for every record for that spans the current 64KiB memory segment\n            while (lowAddress < 0x10000 && recordSize) {\n                recordSize = Math.min(\n                    lineSize,                        // Normal case\n                    blockEnd - highAddress - lowAddress, // End of block\n                    0x10000 - lowAddress             // End of low addresses\n                );\n\n                if (recordSize) {\n\n                    recordHeader[0] = recordSize;   // Length\n                    recordHeader[1] = lowAddress >> 8;// Load offset, high byte\n                    recordHeader[2] = lowAddress;// Load offset, low byte\n                    recordHeader[3] = 0;// Record type\n\n                    var subBlock = block.subarray(blockOffset, blockOffset + recordSize);   // Data bytes for this record\n\n                    records.push(\n                        ':' +\n                        Array.prototype.map.call(recordHeader, hexpad).join('') +\n                        Array.prototype.map.call(subBlock, hexpad).join('') +\n                        hexpad(checksumTwo(recordHeader, subBlock))\n                    );\n\n                    blockOffset += recordSize;\n                    lowAddress += recordSize;\n                }\n            }\n        }\n    }\n\n    records.push(':00000001FF');// EOF record\n\n    return records.join('\\n');\n};\n\n\n/**\n * Performs a deep copy of the current {@linkcode MemoryMap}, returning a new one\n * with exactly the same contents, but allocating new memory for each of its\n * <tt>Uint8Array</tt>s.\n *\n * @return {MemoryMap}\n */\nMemoryMap.prototype.clone = function clone () {\n        var this$1 = this;\n\n    var cloned = new MemoryMap();\n\n    for (var [addr, value] of this$1) {\n        cloned.set(addr, new Uint8Array(value));\n    }\n\n    return cloned;\n};\n\n\n/**\n * Given one <tt>Uint8Array</tt>, looks through its contents and returns a new\n * {@linkcode MemoryMap}, stripping away those regions where there are only\n * padding bytes.\n * <br/>\n * The start of the input <tt>Uint8Array</tt> is assumed to be offset zero for the output.\n * <br/>\n * The use case here is dumping memory from a working device and try to see the\n * \"interesting\" memory regions it has. This assumes that there is a constant,\n * predefined padding byte value being used in the \"non-interesting\" regions.\n * In other words: this will work as long as the dump comes from a flash memory\n * which has been previously erased (thus <tt>0xFF</tt>s for padding), or from a\n * previously blanked HDD (thus <tt>0x00</tt>s for padding).\n * <br/>\n * This method uses <tt>subarray</tt> on the input data, and thus does not allocate memory\n * for the <tt>Uint8Array</tt>s.\n *\n * @param {Uint8Array} bytes The input data\n * @param {Number} [padByte=0xFF] The value of the byte assumed to be used as padding\n * @param {Number} [minPadLength=64] The minimum number of consecutive pad bytes to\n * be considered actual padding\n *\n * @return {MemoryMap}\n */\nMemoryMap.fromPaddedUint8Array = function fromPaddedUint8Array (bytes, padByte, minPadLength) {\n        if ( padByte === void 0 ) padByte=0xFF;\n        if ( minPadLength === void 0 ) minPadLength=64;\n\n\n    if (!(bytes instanceof Uint8Array)) {\n        throw new Error('Bytes passed to fromPaddedUint8Array are not an Uint8Array');\n    }\n\n    // The algorithm used is naïve and checks every byte.\n    // An obvious optimization would be to implement Boyer-Moore\n    // (see https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm )\n    // or otherwise start skipping up to minPadLength bytes when going through a non-pad\n    // byte.\n    // Anyway, we could expect a lot of cases where there is a majority of pad bytes,\n    // and the algorithm should check most of them anyway, so the perf gain is questionable.\n\n    var memMap = new MemoryMap();\n    var consecutivePads = 0;\n    var lastNonPad = -1;\n    var firstNonPad = 0;\n    var skippingBytes = false;\n    var l = bytes.length;\n\n    for (var addr = 0; addr < l; addr++) {\n        var byte = bytes[addr];\n\n        if (byte === padByte) {\n            consecutivePads++;\n            if (consecutivePads >= minPadLength) {\n                // Edge case: ignore writing a zero-length block when skipping\n                // bytes at the beginning of the input\n                if (lastNonPad !== -1) {\n                    /// Add the previous block to the result memMap\n                    memMap.set(firstNonPad, bytes.subarray(firstNonPad, lastNonPad+1));\n                }\n\n                skippingBytes = true;\n            }\n        } else {\n            if (skippingBytes) {\n                skippingBytes = false;\n                firstNonPad = addr;\n            }\n            lastNonPad = addr;\n            consecutivePads = 0;\n        }\n    }\n\n    // At EOF, add the last block if not skipping bytes already (and input not empty)\n    if (!skippingBytes && lastNonPad !== -1) {\n        memMap.set(firstNonPad, bytes.subarray(firstNonPad, l));\n    }\n\n    return memMap;\n};\n\n\n/**\n * Returns a new instance of {@linkcode MemoryMap}, containing only data between\n * the addresses <tt>address</tt> and <tt>address + length</tt>.\n * Behaviour is similar to {@linkcode https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/slice|Array.prototype.slice},\n * in that the return value is a portion of the current {@linkcode MemoryMap}.\n *\n * <br/>\n * The returned {@linkcode MemoryMap} might be empty.\n *\n * <br/>\n * Internally, this uses <tt>subarray</tt>, so new memory is not allocated.\n *\n * @param {Number} address The start address of the slice\n * @param {Number} length The length of memory map to slice out\n * @return {MemoryMap}\n */\nMemoryMap.prototype.slice = function slice (address, length){\n        var this$1 = this;\n        if ( length === void 0 ) length = Infinity;\n\n    if (length < 0) {\n        throw new Error('Length of the slice cannot be negative');\n    }\n\n    var sliced = new MemoryMap();\n\n    for (var [blockAddr, block] of this$1) {\n        var blockLength = block.length;\n\n        if ((blockAddr + blockLength) >= address && blockAddr < (address + length)) {\n            var sliceStart = Math.max(address, blockAddr);\n            var sliceEnd = Math.min(address + length, blockAddr + blockLength);\n            var sliceLength = sliceEnd - sliceStart;\n            var relativeSliceStart = sliceStart - blockAddr;\n\n            if (sliceLength > 0) {\n                sliced.set(sliceStart, block.subarray(relativeSliceStart, relativeSliceStart + sliceLength));\n            }\n        }\n    }\n    return sliced;\n};\n\n/**\n * Returns a new instance of {@linkcode https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32|Uint8Array}, containing only data between\n * the addresses <tt>address</tt> and <tt>address + length</tt>. Any byte without a value\n * in the input {@linkcode MemoryMap} will have a value of <tt>padByte</tt>.\n *\n * <br/>\n * This method allocates new memory.\n *\n * @param {Number} address The start address of the slice\n * @param {Number} length The length of memory map to slice out\n * @param {Number} [padByte=0xFF] The value of the byte assumed to be used as padding\n * @return {MemoryMap}\n */\nMemoryMap.prototype.slicePad = function slicePad (address, length, padByte){\n        var this$1 = this;\n        if ( padByte === void 0 ) padByte=0xFF;\n\n    if (length < 0) {\n        throw new Error('Length of the slice cannot be negative');\n    }\n        \n    var out = (new Uint8Array(length)).fill(padByte);\n\n    for (var [blockAddr, block] of this$1) {\n        var blockLength = block.length;\n\n        if ((blockAddr + blockLength) >= address && blockAddr < (address + length)) {\n            var sliceStart = Math.max(address, blockAddr);\n            var sliceEnd = Math.min(address + length, blockAddr + blockLength);\n            var sliceLength = sliceEnd - sliceStart;\n            var relativeSliceStart = sliceStart - blockAddr;\n\n            if (sliceLength > 0) {\n                out.set(block.subarray(relativeSliceStart, relativeSliceStart + sliceLength), sliceStart - address);\n            }\n        }\n    }\n    return out;\n};\n\n/**\n * Checks whether the current memory map contains the one given as a parameter.\n *\n * <br/>\n * \"Contains\" means that all the offsets that have a byte value in the given\n * memory map have a value in the current memory map, and that the byte values\n * are the same.\n *\n * <br/>\n * An empty memory map is always contained in any other memory map.\n *\n * <br/>\n * Returns boolean <tt>true</tt> if the memory map is contained, <tt>false</tt>\n * otherwise.\n *\n * @param {MemoryMap} memMap The memory map to check\n * @return {Boolean}\n */\nMemoryMap.prototype.contains = function contains (memMap) {\n        var this$1 = this;\n\n    for (var [blockAddr, block] of memMap) {\n\n        var blockLength = block.length;\n\n        var slice = this$1.slice(blockAddr, blockLength).join().get(blockAddr);\n\n        if ((!slice) || slice.length !== blockLength ) {\n            return false;\n        }\n\n        for (var i in block) {\n            if (block[i] !== slice[i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nObject.defineProperties( MemoryMap.prototype, prototypeAccessors );\n\nreturn MemoryMap;\n\n})));\n\n\n},{}]},{},[18])(18)\n});\n"],"file":"dap.bundle.js","sourceRoot":"../lib"}